{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Adonis is a community-maintained server management and moderation system created by Sceleratis (Davey_Bones). \ud83d\udc49 Refer to the side panel for specific sections/information. \ud83d\udcd8 User Manual: https://github.com/Epix-Incorporated/Adonis/wiki/User-Manual-&-Feature-Showcase Documentation is currently work-in-progress. Documentation for the Adonis _G API can be found here . \u2b50 Contributing View the contribution guidelines and instructions here if you'd like to contribute to the Adonis project. \ud83d\udd17 Links Adonis Loader: https://www.roblox.com/library/7510622625/Adonis-Loader Adonis MainModule: https://www.roblox.com/library/7510592873/Adonis-MainModule Nightly MainModule: https://www.roblox.com/library/8612978896/Nightlies-Adonis-MainModule","title":"Home"},{"location":"#contributing","text":"View the contribution guidelines and instructions here if you'd like to contribute to the Adonis project.","title":"\u2b50 Contributing"},{"location":"#links","text":"Adonis Loader: https://www.roblox.com/library/7510622625/Adonis-Loader Adonis MainModule: https://www.roblox.com/library/7510592873/Adonis-MainModule Nightly MainModule: https://www.roblox.com/library/8612978896/Nightlies-Adonis-MainModule","title":"\ud83d\udd17 Links"},{"location":"Plugins-%26-Modules/","text":"Adonis expects any modules it's loading to return a function containing the module's code to run. Adonis will require the module, set the returned function's environment to a custom one containing all important variables, and will execute the function. Plugins are loaded without yielding and will be loaded only after all of the core modules are loaded. User-defined modules (plugins) Developers can create custom modules for Adonis to load without needing to alter Adonis's MainModule. Simply add modules to Adonis_Loader > Config > Plugins \ud83d\udc49 Server modules should have names starting with \"Server:\" or \"Server-\" \ud83d\udc49 Client modules should have names starting with \"Client:\" or \"Client-\" Example: \"Server: CustomChatHandler\" The module's name will be used by Adonis to determine if the module is a client plugin or a server plugin. The modules will be loaded after the \"Core\" modules finish loading. Plugins have the same level of access as any of Adonis's \"Core\" modules. Because of this, plugin modules are free to add, remove, and change whatever they like. It is advised, however, that you avoid removing any existing tables, functions, or objects and instead replace them with \"dummy\" alternatives to avoid causing serious errors. Example server plugin The following is an example server plugin return function(Vargs) local server = Vargs.Server local service = Vargs.Service --// Add a new command to the Commands table at index \"ExampleCommand1\" server.Commands.ExampleCommand1 = { --// The index & table of the command Prefix = server.Settings.Prefix; --// The prefix the command will use, this is the ':' in ':ff me' Commands = {\"examplecommand1\", \"examplealias1\", \"examplealias2\"}; --// A table containing the command strings (the things you chat in-game to run the command, the 'ff' in ':ff me') Args = {\"arg1\", \"arg2\", \"etc\"}; --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the 'me' in ':ff me' Description = \"Example command\"; --// The description of the command AdminLevel = 100; -- Moderators --// The command's minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, \"HeadAdmins\", etc}; --// Alternative option: AdminLevel = \"Moderators\"; Filter = true; --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players Fun = false; --// Is this command considered as fun? Hidden = true; --// Should this command be hidden from the command list? Disabled = true; --// Should this command be unusable? NoStudio = false; --// Should this command be blocked from being executed in a Studio environment? NonChattable = false; --// Should this command be blocked from being executed via chat? CrossServerDenied = false; --// If true, this command will not be usable via :crossserver Function = function(plr: Player, args: {string}, data: {}) --// The command's function; This is the actual code of the command which runs when you run the command --// \"plr\" is the player running the command --// \"args\" is a table containing command arguments supplied by the user --// \"data\" is a table containing information related to the command and the player running it, such as data.PlayerData.Level (the player's admin level) print(\"This is 'arg1':\", args[1]) print(\"This is 'arg2':\", args[2]) print(\"This is 'etc'(arg 3):\", args[3]) error(\"this is an example error :o !\") end } end In this example, we create a new command named \"ExampleCommand1\" which can be ran using \":examplecommand1\" (assuming the command Prefix is set to \":\" in loader settings). In the same way we can add commands, we can use the same method to remove or alter commands. Instead of creating an entirely new command named ExampleCommand, the following would remove the command \":ff\" from the script and make it so the :kick command still exists but does nothing. return function(Vargs) local server = Vargs.Server local service = Vargs.Service --// Remove ForceField from the Commands table server.Commands.ForceField = nil --// Change the Kick command to do nothing: server.Commands.Kick.Function = function(plr: Player, args: {string}) print(plr.Name ..\" tried to kick someone\") end end If you wish to do this, refer to the appropriate commands module located under MainModule > Server > Commands to view the internal index of a command. Alternatively, you may run :cmdinfo <command> in-game which will also display the command's index.","title":"Plugins & Modules"},{"location":"Plugins-%26-Modules/#user-defined-modules-plugins","text":"Developers can create custom modules for Adonis to load without needing to alter Adonis's MainModule. Simply add modules to Adonis_Loader > Config > Plugins \ud83d\udc49 Server modules should have names starting with \"Server:\" or \"Server-\" \ud83d\udc49 Client modules should have names starting with \"Client:\" or \"Client-\" Example: \"Server: CustomChatHandler\" The module's name will be used by Adonis to determine if the module is a client plugin or a server plugin. The modules will be loaded after the \"Core\" modules finish loading. Plugins have the same level of access as any of Adonis's \"Core\" modules. Because of this, plugin modules are free to add, remove, and change whatever they like. It is advised, however, that you avoid removing any existing tables, functions, or objects and instead replace them with \"dummy\" alternatives to avoid causing serious errors.","title":"User-defined modules (plugins)"},{"location":"Plugins-%26-Modules/#example-server-plugin","text":"The following is an example server plugin return function(Vargs) local server = Vargs.Server local service = Vargs.Service --// Add a new command to the Commands table at index \"ExampleCommand1\" server.Commands.ExampleCommand1 = { --// The index & table of the command Prefix = server.Settings.Prefix; --// The prefix the command will use, this is the ':' in ':ff me' Commands = {\"examplecommand1\", \"examplealias1\", \"examplealias2\"}; --// A table containing the command strings (the things you chat in-game to run the command, the 'ff' in ':ff me') Args = {\"arg1\", \"arg2\", \"etc\"}; --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the 'me' in ':ff me' Description = \"Example command\"; --// The description of the command AdminLevel = 100; -- Moderators --// The command's minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, \"HeadAdmins\", etc}; --// Alternative option: AdminLevel = \"Moderators\"; Filter = true; --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players Fun = false; --// Is this command considered as fun? Hidden = true; --// Should this command be hidden from the command list? Disabled = true; --// Should this command be unusable? NoStudio = false; --// Should this command be blocked from being executed in a Studio environment? NonChattable = false; --// Should this command be blocked from being executed via chat? CrossServerDenied = false; --// If true, this command will not be usable via :crossserver Function = function(plr: Player, args: {string}, data: {}) --// The command's function; This is the actual code of the command which runs when you run the command --// \"plr\" is the player running the command --// \"args\" is a table containing command arguments supplied by the user --// \"data\" is a table containing information related to the command and the player running it, such as data.PlayerData.Level (the player's admin level) print(\"This is 'arg1':\", args[1]) print(\"This is 'arg2':\", args[2]) print(\"This is 'etc'(arg 3):\", args[3]) error(\"this is an example error :o !\") end } end In this example, we create a new command named \"ExampleCommand1\" which can be ran using \":examplecommand1\" (assuming the command Prefix is set to \":\" in loader settings). In the same way we can add commands, we can use the same method to remove or alter commands. Instead of creating an entirely new command named ExampleCommand, the following would remove the command \":ff\" from the script and make it so the :kick command still exists but does nothing. return function(Vargs) local server = Vargs.Server local service = Vargs.Service --// Remove ForceField from the Commands table server.Commands.ForceField = nil --// Change the Kick command to do nothing: server.Commands.Kick.Function = function(plr: Player, args: {string}) print(plr.Name ..\" tried to kick someone\") end end If you wish to do this, refer to the appropriate commands module located under MainModule > Server > Commands to view the internal index of a command. Alternatively, you may run :cmdinfo <command> in-game which will also display the command's index.","title":"Example server plugin"},{"location":"Structure/","text":"File Structure The internal file structure of both Adonis's client and server can be broken down into four main parts: Core This folder contains modules essential to the script's functionality. When Adonis starts, all modules within the core folder are loaded in a specific order. These modules must be loaded, in order, before the script can start doing anything. Server Load Order: Service Logs Variables Core Remote Functions Process Admin HTTP Anti Commands Client Load Order: Service Variables UI Core Remote Functions Process Anti Dependencies All dependencies of the client or server are contained within the respective \"Dependencies\" folder. This can include pre-made scripts and UI elements. Plugins The \"Plugins\" folders specific non-essential modules to be loaded. The server will automatically populate the client's Plugins folder if user defined client plugins are present in Loader > Config > Plugins Main Scripts Server Handles the server-side loading process. Client Handles the client-side loading process. Code Structure Adonis has three main tables that nearly all variables, functions, settings, objects, and folders, can be accessed from. \"server\" & \"client\" The \"server\" and \"client\" variables are tables containing everything related to Adonis's functionality. This includes any tables, functions, and variables added by loaded modules. service The \"service\" metatable is a variable unique to Adonis and it's modules that provides many functions and services used throughout both the client and server. Within the service metatable are functions to handle anything from task creation and tracking to object deletion. If the index requested is not found within the service table, it will return a game service matching the index if it can. (Specifically, it just returns game:GetService(index) .)","title":"File Structure"},{"location":"Structure/#file-structure","text":"The internal file structure of both Adonis's client and server can be broken down into four main parts:","title":"File Structure"},{"location":"Structure/#core","text":"This folder contains modules essential to the script's functionality. When Adonis starts, all modules within the core folder are loaded in a specific order. These modules must be loaded, in order, before the script can start doing anything.","title":"Core"},{"location":"Structure/#server-load-order","text":"Service Logs Variables Core Remote Functions Process Admin HTTP Anti Commands","title":"Server Load Order:"},{"location":"Structure/#client-load-order","text":"Service Variables UI Core Remote Functions Process Anti","title":"Client Load Order:"},{"location":"Structure/#dependencies","text":"All dependencies of the client or server are contained within the respective \"Dependencies\" folder. This can include pre-made scripts and UI elements.","title":"Dependencies"},{"location":"Structure/#plugins","text":"The \"Plugins\" folders specific non-essential modules to be loaded. The server will automatically populate the client's Plugins folder if user defined client plugins are present in Loader > Config > Plugins","title":"Plugins"},{"location":"Structure/#main-scripts","text":"","title":"Main Scripts"},{"location":"Structure/#server","text":"Handles the server-side loading process.","title":"Server"},{"location":"Structure/#client","text":"Handles the client-side loading process.","title":"Client"},{"location":"Structure/#code-structure","text":"Adonis has three main tables that nearly all variables, functions, settings, objects, and folders, can be accessed from.","title":"Code Structure"},{"location":"Structure/#server-client","text":"The \"server\" and \"client\" variables are tables containing everything related to Adonis's functionality. This includes any tables, functions, and variables added by loaded modules.","title":"\"server\" &amp; \"client\""},{"location":"Structure/#service","text":"The \"service\" metatable is a variable unique to Adonis and it's modules that provides many functions and services used throughout both the client and server. Within the service metatable are functions to handle anything from task creation and tracking to object deletion. If the index requested is not found within the service table, it will return a game service matching the index if it can. (Specifically, it just returns game:GetService(index) .)","title":"service"},{"location":"User-Manual-%26-Feature-Showcase/","text":"Contents Command Usage Guide The \"UserPanel\" GUI UI Themes Showcase Moderation Commands Reference Adonis Features Showcase ## \u2139\ufe0f **Notice** **This manual is intended for regular users, moderators and admins in ROBLOX games using the Adonis admin system. For guidance on installing Adonis in your game as a developer, please refer to the [README](https://github.com/Sceleratis/Adonis/blob/master/README.md) file in the repository. For API documentation, navigate to the [other pages](https://github.com/Sceleratis/Adonis/wiki) on this wiki.** Section 1: Command Usage Guide Execution These are the following ways by which an Adonis command can be executed by a user: - by chat (as long as chat commands have not been disabled) - by command console (default keybind for opening the console is ' ; the console may be restricted or disabled according to settings) - by other interfaces such as :cmdbox In all cases, the prefix (which is : by default for admin commands and ! by default for player commands) must be included at the start of each command for it to work. \u2139\ufe0f Tip: To run a command silently in the chat (so that other players do not see it), either prepend it with \"/e \" (eg. \"/e :kill scel\") or enable chat command hiding in your client settings . Player Selectors Commands that take players as their argument (eg. :kill ) will normally support either a singular player or a comma-separated list of player names. Example: :god scel or :kill noob1,noob2 Note that player names are not case-sensitive and may be partial, eg. scel for Sceleratis . In addition to simply using player names, the following special identifiers for targeting certain groups of players exist: - me - yourself (the executor of the command) - all - everyone in the server - others - everyone in the server except yourself - admins - all admins in the server - nonadmins - everyone except admins in the server - random - a random person in the server - #NUM - random players in the server - @USERNAME - targets a specific player whose username is exactly - %TEAM - members of the team - $GROUPID - members of the group with ID (number found in the Roblox group webpage URL) - radius-NUM - anyone within a -stud radius of you Placing - before any selector or player name will invert the selection and select everyone except those within the selection defined after - . To illustrate, using the others selector is essentially the same as doing all,-me . Example: :explode -radius-10 - explodes all players further than 10 studs from you. Batch Commands Multiple commands can be ran sequentially at a time by separating them using the batch key, which defaults to | (vertical pipe). Additionally, you can insert timed delays using !wait <duration in seconds> . Example: :ff me | :m Exploding everyone in 10 seconds! | !wait 10 | :explode all - gives you a forcefield and makes a message announcement, waits 10 seconds, then explodes everyone. Repetition Admins/moderators by default have access to the :repeat <times> <delay> command, which easily allows a command to be ran in a loop. Example: :repeat 10 1 :sword me | :heal me - will give you a sword and heal yourself once every 1 second, for 10 times. Reference Commands :cmds for a list of available commands :cmdinfo <command> for detailed info about a specific command !brickcolors for a list of valid BrickColors (can be used in some commands which take a brickcolor argument) !materials for a list of material types :capes for a list of preset capes available to admins :musiclist for a list of preset audios :insertlist for a list of assets that can be inserted using :insert <name> (set by the developer in settings.InsertList ) Return to Top Section 2: The \"UserPanel\" GUI The UserPanel GUI can be used to quickly access certain things in Adonis, such as commands, as well as configure Adonis client or server settings. This wiki page will go over the different tabs within Adonis's UserPanel GUI and what they do. Info The info tab shows you information about Adonis, and gives the user convenient buttons to perform actions such as opening the command list, viewing the changelog, viewing credits, getting the loader, or getting the system's source in the form of its MainModule. Donate This is where users can donate to Adonis's development and control settings related to their donator perks. These perks can be disabled by the place owner in the settings module of the Loader. Donation perks are intended to be purely visual and should not impact gameplay. When users donate in your game, Roblox will give the place owner 10% of the sale. Keybinds The keybinds tab allows users to bind command strings to a specific key, so when they press that key the specified command gets executed. Aliases Aliases allow you to create custom commands that point to existing commands, or a combination of existing commands. When creating an alias, you can add markers for command arguments. The order the argument identifiers appear in the command string is the order the arguments will be replaced in. To better understand lets go through what's going on in the above screenshot: The command string :kill <arg1> | :fire <arg1> <arg2> is bound to :killfire The following happens when :killfire scel Really red is ran: In the command string, both substrings for <arg1> is replaced with scel and the substring <arg2> is replaced with Really red :killfire scel Really red is replaced by :kill scel | :fire scel Really red . The new command string gets processed like any other command. In this case we are running two commands at once, in other words a \"batch\" command as indicated by the | separating the two commands. The BatchKey setting can be used to change the | (vertical pipe) to whatever you'd like as long as it is not the same as the SplitKey or any of the Prefix settings. It's important to note that the number of arguments is determined by the number of unique argument identifiers. Also, the actual text within the argument identifier is not important and is only used to match user-supplied arguments to where they should be. The order that these unique argument identifiers appear in the command string is what determines which which identifier will match argument 1, the next unique one found being argument 2, and so on. This is important to keep in mind. If you were to change the command string to :kill <arg2> | :fire <arg2> <arg1> and then chatted :killfire scel Really red scel would be assigned to <arg2> and Really red would be assigned to <arg1> so :killfire Really red scel would not work (as :kill scel would now be :kill Really red ) It should also be noted that arguments that are intended to take spaces must appear last as otherwise portions of them may be treated as part of previous arguments when using the default SplitKey (a blank space.) This system is currently still in development and may see improvements in the near future, such as manually defining in the alias string how arguments should be interpreted and matched to the command string. For now, you should not add argument indicators to the alias string. They should only be in the command string, and the order they appear is what currently determines the argument position they will be matched to in the chatted message. Client You've likely noticed that the UserPanel GUI in the screenshots here does not look like the default UserPanel. This is because Adonis supports multiple themes, my personal favorite being the Rounded theme (the one seen in these screenshots.) The default theme is named \"Default\" and is used for all UI development, and determines the default GUIs and UI modules used in the event the selected theme does not have the GUI being generated. Users can choose what theme they would like to use by clicking the text next to the arrow pointing down next to the \"Theme\" listing. There are also a few other client-specific settings. It should be noted that these settings are user-specific and only affect the user's client. They are not game breaking and only seek to offer finer control over certain things if the user wishes to do so. Client Settings Setting Description Keybinds Enables/Disables keybinds (if disabled, keybinds will no longer work until re-enabled) UI Keep Alive Determines whether or not Adonis should attempt to prevent the deletion of its GUIs when the player respawns. Particle Effects Adonis contains a number of commands that involve particle effects, which for some users may be irritating or even performance-impacting. All particle effects are local to each client and as such can be toggled using this setting. Capes Like particle effects, capes (such as donor capes) are handled locally and can be disabled. Hide Chat Commands Whether Adonis commands that you run via the chat will automatically be hidden from other players. Console Key This is the key that will open/close the command console (the bar that appears when you press the Quote key by default). Theme Allows you to select the UI theme you want to use. Changing this to \"Game Theme\" will use whatever theme is set in the Adonis settings module (in the Loader). This is used by default for all new users. Game This is where creators can control Adonis related server settings for their game while in-game instead of in studio. \"Clear all saved settings\" will clear any settings previously written to the datastore. This is especially useful if you encounter issues after changing a setting in-game or quickly want to revert to only what is set within the settings module. Anything with \"Cannot change\" next to it can only be changed in studio currently. If you ever change the prefix in-game and suddenly find yourself unable to open settings to fix it, running :adonissettings will open the UserPanel GUI and focus the \"Game\" tab so you can fix any issues. The :adonissettings command will always use : as a prefix so you can't accidentally change it to something unusable. Return to Top Section 3: UI Themes Showcase The following are the themes that come with Adonis by default: Default GUI Screenshot UserPanel HelpButton Console Notification Message Hint Error Rounded GUI Screenshot UserPanel Console Notification Error Colorize Note: rainbow effects are animated with chromatic interpolation. GUI Screenshot UserPanel Console Notification Message Hint Error BasicAdmin This theme only changes the announcement GUIs. GUI Screenshot Message Aero Made by @Expertcoderz . GUI Screenshot UserPanel HelpButton Console Notification Message Hint Error Unity Made by @LolloDev5123 . GUI Screenshot UserPanel HelpButton Console Notification Message Error Windows XP Made by @P3tray . GUI Screenshot UserPanel HelpButton Console Notification Message Hint Error Return to Top Section 4: Moderation Commands Reference This section serves as a basic reference guide for the essential moderation commands offered by Adonis. General :kick <player> <reason> Disconnects the specified player from the server. If specified, the reason is shown to the player. Warning Players :warnings <player> Displays the specified player's warning log. :warn <player> <reason> Gives the specified player a warning, upon which they will be notified with the reason. :kickwarn <player> <reason> Gives the specified player a warning and kicks them; displays the warning reason in their kick message. :removewarning <player> <reason> Deletes the specified warning from the player's warning log. :clearwarnings <player> Clears the player's warning log. Banning Players :banlist Displays a list of normal bans. :timebanlist Displays a list of time-banned users. :trellobanlist/:sbl Displays a list of users banned via Trello; only applicable if Trello integration is configured. :ban/:serverban <player> <reason> Bans the specified player from the current server. Note that they may still be able to join other servers. :permban/:gameban <player> <reason> Bans the specified player from all game servers, for an indefinite amount of time. Enforced immediately, so if the user is in a server other than where the command is run, they will be kicked by the system. :tempban/:timeban <player> <duration (s/m/h/d)> <reason> Bans the specified player from all game servers, for a specific amount of time. Enforced immediately. Example: :tempban Player1 3d -- globally-bans Player1 for 3 days. :trelloban <player> <reason> Adds the specified player to the Trello ban list, if Trello integrations are configured for the game. \u2139\ufe0f Tip: The above commands support full usernames for the <player> argument, which means you can ban specific users who are not currently in your server. Player Notes :notes <player> Displays a list of notes on the specified player. :note <player> <note> Sets a note on the specified player. :removenote <player> <note> Removes a note from a specified player. Specify all for <note> to clear all notes on that player. Return to Top Section 5: Adonis Features Showcase Here's a miscellaneous collection of some interesting features that many users of the Adonis admin system may not be aware of: \ud83d\udea9 :teams This is an interface that allows you to view, create, delete and join teams easily. \ud83d\udee0\ufe0f :tools -- Inventory Monitor GUI This utility allows you to view and manage players' backpacks via a user-friendly realtime inventory monitoring interface. An alternative to manually running the :viewtools <player> , :removetool <player> <tool name> and :removetools <player> commands. \ud83d\udcc2 :explorer This is a built-in alternative to :dex which allows you to view and navigate the game's file structure as well as delete objects. \ud83d\udcc3 :players Displays full a list of in-game players along with some live-updated info about the state of their characters; may be useful for moderators if your game has the regular player list GUI hidden. \ud83d\udd0d !profile <player> Displays quite comprehensive information about a specific player. Some details such as safechat status and the \"Game\" tab are hidden from non-admins for security reasons. \u2139\ufe0f !serverinfo Displays information about the current server. Some details are hidden from non-admins for security reasons. \ud83d\udd75\ufe0f :incognito <player> A powerful command that allows admins to hide themselves from other players in the server by vanishing from their player lists. Return to Top That's all, folks! Notice anything wrong? Submit an issue here or discuss it in our official Discord server .","title":"Contents"},{"location":"User-Manual-%26-Feature-Showcase/#contents","text":"Command Usage Guide The \"UserPanel\" GUI UI Themes Showcase Moderation Commands Reference Adonis Features Showcase ## \u2139\ufe0f **Notice** **This manual is intended for regular users, moderators and admins in ROBLOX games using the Adonis admin system. For guidance on installing Adonis in your game as a developer, please refer to the [README](https://github.com/Sceleratis/Adonis/blob/master/README.md) file in the repository. For API documentation, navigate to the [other pages](https://github.com/Sceleratis/Adonis/wiki) on this wiki.**","title":"Contents"},{"location":"User-Manual-%26-Feature-Showcase/#section-1-command-usage-guide","text":"","title":"Section 1: Command Usage Guide"},{"location":"User-Manual-%26-Feature-Showcase/#execution","text":"These are the following ways by which an Adonis command can be executed by a user: - by chat (as long as chat commands have not been disabled) - by command console (default keybind for opening the console is ' ; the console may be restricted or disabled according to settings) - by other interfaces such as :cmdbox In all cases, the prefix (which is : by default for admin commands and ! by default for player commands) must be included at the start of each command for it to work. \u2139\ufe0f Tip: To run a command silently in the chat (so that other players do not see it), either prepend it with \"/e \" (eg. \"/e :kill scel\") or enable chat command hiding in your client settings .","title":"Execution"},{"location":"User-Manual-%26-Feature-Showcase/#player-selectors","text":"Commands that take players as their argument (eg. :kill ) will normally support either a singular player or a comma-separated list of player names. Example: :god scel or :kill noob1,noob2 Note that player names are not case-sensitive and may be partial, eg. scel for Sceleratis . In addition to simply using player names, the following special identifiers for targeting certain groups of players exist: - me - yourself (the executor of the command) - all - everyone in the server - others - everyone in the server except yourself - admins - all admins in the server - nonadmins - everyone except admins in the server - random - a random person in the server - #NUM - random players in the server - @USERNAME - targets a specific player whose username is exactly - %TEAM - members of the team - $GROUPID - members of the group with ID (number found in the Roblox group webpage URL) - radius-NUM - anyone within a -stud radius of you Placing - before any selector or player name will invert the selection and select everyone except those within the selection defined after - . To illustrate, using the others selector is essentially the same as doing all,-me . Example: :explode -radius-10 - explodes all players further than 10 studs from you.","title":"Player Selectors"},{"location":"User-Manual-%26-Feature-Showcase/#batch-commands","text":"Multiple commands can be ran sequentially at a time by separating them using the batch key, which defaults to | (vertical pipe). Additionally, you can insert timed delays using !wait <duration in seconds> . Example: :ff me | :m Exploding everyone in 10 seconds! | !wait 10 | :explode all - gives you a forcefield and makes a message announcement, waits 10 seconds, then explodes everyone.","title":"Batch Commands"},{"location":"User-Manual-%26-Feature-Showcase/#repetition","text":"Admins/moderators by default have access to the :repeat <times> <delay> command, which easily allows a command to be ran in a loop. Example: :repeat 10 1 :sword me | :heal me - will give you a sword and heal yourself once every 1 second, for 10 times.","title":"Repetition"},{"location":"User-Manual-%26-Feature-Showcase/#reference-commands","text":":cmds for a list of available commands :cmdinfo <command> for detailed info about a specific command !brickcolors for a list of valid BrickColors (can be used in some commands which take a brickcolor argument) !materials for a list of material types :capes for a list of preset capes available to admins :musiclist for a list of preset audios :insertlist for a list of assets that can be inserted using :insert <name> (set by the developer in settings.InsertList ) Return to Top","title":"Reference Commands"},{"location":"User-Manual-%26-Feature-Showcase/#section-2-the-userpanel-gui","text":"The UserPanel GUI can be used to quickly access certain things in Adonis, such as commands, as well as configure Adonis client or server settings. This wiki page will go over the different tabs within Adonis's UserPanel GUI and what they do.","title":"Section 2: The \"UserPanel\" GUI"},{"location":"User-Manual-%26-Feature-Showcase/#info","text":"The info tab shows you information about Adonis, and gives the user convenient buttons to perform actions such as opening the command list, viewing the changelog, viewing credits, getting the loader, or getting the system's source in the form of its MainModule.","title":"Info"},{"location":"User-Manual-%26-Feature-Showcase/#donate","text":"This is where users can donate to Adonis's development and control settings related to their donator perks. These perks can be disabled by the place owner in the settings module of the Loader. Donation perks are intended to be purely visual and should not impact gameplay. When users donate in your game, Roblox will give the place owner 10% of the sale.","title":"Donate"},{"location":"User-Manual-%26-Feature-Showcase/#keybinds","text":"The keybinds tab allows users to bind command strings to a specific key, so when they press that key the specified command gets executed.","title":"Keybinds"},{"location":"User-Manual-%26-Feature-Showcase/#aliases","text":"Aliases allow you to create custom commands that point to existing commands, or a combination of existing commands. When creating an alias, you can add markers for command arguments. The order the argument identifiers appear in the command string is the order the arguments will be replaced in. To better understand lets go through what's going on in the above screenshot: The command string :kill <arg1> | :fire <arg1> <arg2> is bound to :killfire The following happens when :killfire scel Really red is ran: In the command string, both substrings for <arg1> is replaced with scel and the substring <arg2> is replaced with Really red :killfire scel Really red is replaced by :kill scel | :fire scel Really red . The new command string gets processed like any other command. In this case we are running two commands at once, in other words a \"batch\" command as indicated by the | separating the two commands. The BatchKey setting can be used to change the | (vertical pipe) to whatever you'd like as long as it is not the same as the SplitKey or any of the Prefix settings. It's important to note that the number of arguments is determined by the number of unique argument identifiers. Also, the actual text within the argument identifier is not important and is only used to match user-supplied arguments to where they should be. The order that these unique argument identifiers appear in the command string is what determines which which identifier will match argument 1, the next unique one found being argument 2, and so on. This is important to keep in mind. If you were to change the command string to :kill <arg2> | :fire <arg2> <arg1> and then chatted :killfire scel Really red scel would be assigned to <arg2> and Really red would be assigned to <arg1> so :killfire Really red scel would not work (as :kill scel would now be :kill Really red ) It should also be noted that arguments that are intended to take spaces must appear last as otherwise portions of them may be treated as part of previous arguments when using the default SplitKey (a blank space.) This system is currently still in development and may see improvements in the near future, such as manually defining in the alias string how arguments should be interpreted and matched to the command string. For now, you should not add argument indicators to the alias string. They should only be in the command string, and the order they appear is what currently determines the argument position they will be matched to in the chatted message.","title":"Aliases"},{"location":"User-Manual-%26-Feature-Showcase/#client","text":"You've likely noticed that the UserPanel GUI in the screenshots here does not look like the default UserPanel. This is because Adonis supports multiple themes, my personal favorite being the Rounded theme (the one seen in these screenshots.) The default theme is named \"Default\" and is used for all UI development, and determines the default GUIs and UI modules used in the event the selected theme does not have the GUI being generated. Users can choose what theme they would like to use by clicking the text next to the arrow pointing down next to the \"Theme\" listing. There are also a few other client-specific settings. It should be noted that these settings are user-specific and only affect the user's client. They are not game breaking and only seek to offer finer control over certain things if the user wishes to do so.","title":"Client"},{"location":"User-Manual-%26-Feature-Showcase/#client-settings","text":"Setting Description Keybinds Enables/Disables keybinds (if disabled, keybinds will no longer work until re-enabled) UI Keep Alive Determines whether or not Adonis should attempt to prevent the deletion of its GUIs when the player respawns. Particle Effects Adonis contains a number of commands that involve particle effects, which for some users may be irritating or even performance-impacting. All particle effects are local to each client and as such can be toggled using this setting. Capes Like particle effects, capes (such as donor capes) are handled locally and can be disabled. Hide Chat Commands Whether Adonis commands that you run via the chat will automatically be hidden from other players. Console Key This is the key that will open/close the command console (the bar that appears when you press the Quote key by default). Theme Allows you to select the UI theme you want to use. Changing this to \"Game Theme\" will use whatever theme is set in the Adonis settings module (in the Loader). This is used by default for all new users.","title":"Client Settings"},{"location":"User-Manual-%26-Feature-Showcase/#game","text":"This is where creators can control Adonis related server settings for their game while in-game instead of in studio. \"Clear all saved settings\" will clear any settings previously written to the datastore. This is especially useful if you encounter issues after changing a setting in-game or quickly want to revert to only what is set within the settings module. Anything with \"Cannot change\" next to it can only be changed in studio currently. If you ever change the prefix in-game and suddenly find yourself unable to open settings to fix it, running :adonissettings will open the UserPanel GUI and focus the \"Game\" tab so you can fix any issues. The :adonissettings command will always use : as a prefix so you can't accidentally change it to something unusable. Return to Top","title":"Game"},{"location":"User-Manual-%26-Feature-Showcase/#section-3-ui-themes-showcase","text":"The following are the themes that come with Adonis by default:","title":"Section 3: UI Themes Showcase"},{"location":"User-Manual-%26-Feature-Showcase/#default","text":"GUI Screenshot UserPanel HelpButton Console Notification Message Hint Error","title":"Default"},{"location":"User-Manual-%26-Feature-Showcase/#rounded","text":"GUI Screenshot UserPanel Console Notification Error","title":"Rounded"},{"location":"User-Manual-%26-Feature-Showcase/#colorize","text":"Note: rainbow effects are animated with chromatic interpolation. GUI Screenshot UserPanel Console Notification Message Hint Error","title":"Colorize"},{"location":"User-Manual-%26-Feature-Showcase/#basicadmin","text":"This theme only changes the announcement GUIs. GUI Screenshot Message","title":"BasicAdmin"},{"location":"User-Manual-%26-Feature-Showcase/#aero","text":"Made by @Expertcoderz . GUI Screenshot UserPanel HelpButton Console Notification Message Hint Error","title":"Aero"},{"location":"User-Manual-%26-Feature-Showcase/#unity","text":"Made by @LolloDev5123 . GUI Screenshot UserPanel HelpButton Console Notification Message Error","title":"Unity"},{"location":"User-Manual-%26-Feature-Showcase/#windows-xp","text":"Made by @P3tray . GUI Screenshot UserPanel HelpButton Console Notification Message Hint Error Return to Top","title":"Windows XP"},{"location":"User-Manual-%26-Feature-Showcase/#section-4-moderation-commands-reference","text":"This section serves as a basic reference guide for the essential moderation commands offered by Adonis.","title":"Section 4: Moderation Commands Reference"},{"location":"User-Manual-%26-Feature-Showcase/#general","text":"","title":"General"},{"location":"User-Manual-%26-Feature-Showcase/#kick-player-reason","text":"Disconnects the specified player from the server. If specified, the reason is shown to the player.","title":":kick &lt;player&gt; &lt;reason&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#warning-players","text":"","title":"Warning Players"},{"location":"User-Manual-%26-Feature-Showcase/#warnings-player","text":"Displays the specified player's warning log.","title":":warnings &lt;player&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#warn-player-reason","text":"Gives the specified player a warning, upon which they will be notified with the reason.","title":":warn &lt;player&gt; &lt;reason&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#kickwarn-player-reason","text":"Gives the specified player a warning and kicks them; displays the warning reason in their kick message.","title":":kickwarn &lt;player&gt; &lt;reason&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#removewarning-player-reason","text":"Deletes the specified warning from the player's warning log.","title":":removewarning &lt;player&gt; &lt;reason&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#clearwarnings-player","text":"Clears the player's warning log.","title":":clearwarnings &lt;player&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#banning-players","text":"","title":"Banning Players"},{"location":"User-Manual-%26-Feature-Showcase/#banlist","text":"Displays a list of normal bans.","title":":banlist"},{"location":"User-Manual-%26-Feature-Showcase/#timebanlist","text":"Displays a list of time-banned users.","title":":timebanlist"},{"location":"User-Manual-%26-Feature-Showcase/#trellobanlistsbl","text":"Displays a list of users banned via Trello; only applicable if Trello integration is configured.","title":":trellobanlist/:sbl"},{"location":"User-Manual-%26-Feature-Showcase/#banserverban-player-reason","text":"Bans the specified player from the current server. Note that they may still be able to join other servers.","title":":ban/:serverban &lt;player&gt; &lt;reason&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#permbangameban-player-reason","text":"Bans the specified player from all game servers, for an indefinite amount of time. Enforced immediately, so if the user is in a server other than where the command is run, they will be kicked by the system.","title":":permban/:gameban &lt;player&gt; &lt;reason&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#tempbantimeban-player-duration-smhd-reason","text":"Bans the specified player from all game servers, for a specific amount of time. Enforced immediately. Example: :tempban Player1 3d -- globally-bans Player1 for 3 days.","title":":tempban/:timeban &lt;player&gt; &lt;duration (s/m/h/d)&gt; &lt;reason&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#trelloban-player-reason","text":"Adds the specified player to the Trello ban list, if Trello integrations are configured for the game. \u2139\ufe0f Tip: The above commands support full usernames for the <player> argument, which means you can ban specific users who are not currently in your server.","title":":trelloban &lt;player&gt; &lt;reason&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#player-notes","text":"","title":"Player Notes"},{"location":"User-Manual-%26-Feature-Showcase/#notes-player","text":"Displays a list of notes on the specified player.","title":":notes &lt;player&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#note-player-note","text":"Sets a note on the specified player.","title":":note &lt;player&gt; &lt;note&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#removenote-player-note","text":"Removes a note from a specified player. Specify all for <note> to clear all notes on that player. Return to Top","title":":removenote &lt;player&gt; &lt;note&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#section-5-adonis-features-showcase","text":"Here's a miscellaneous collection of some interesting features that many users of the Adonis admin system may not be aware of:","title":"Section 5: Adonis Features Showcase"},{"location":"User-Manual-%26-Feature-Showcase/#teams","text":"This is an interface that allows you to view, create, delete and join teams easily.","title":"\ud83d\udea9 :teams"},{"location":"User-Manual-%26-Feature-Showcase/#tools-inventory-monitor-gui","text":"This utility allows you to view and manage players' backpacks via a user-friendly realtime inventory monitoring interface. An alternative to manually running the :viewtools <player> , :removetool <player> <tool name> and :removetools <player> commands.","title":"\ud83d\udee0\ufe0f :tools -- Inventory Monitor GUI"},{"location":"User-Manual-%26-Feature-Showcase/#explorer","text":"This is a built-in alternative to :dex which allows you to view and navigate the game's file structure as well as delete objects.","title":"\ud83d\udcc2 :explorer"},{"location":"User-Manual-%26-Feature-Showcase/#players","text":"Displays full a list of in-game players along with some live-updated info about the state of their characters; may be useful for moderators if your game has the regular player list GUI hidden.","title":"\ud83d\udcc3 :players"},{"location":"User-Manual-%26-Feature-Showcase/#profile-player","text":"Displays quite comprehensive information about a specific player. Some details such as safechat status and the \"Game\" tab are hidden from non-admins for security reasons.","title":"\ud83d\udd0d !profile &lt;player&gt;"},{"location":"User-Manual-%26-Feature-Showcase/#i-serverinfo","text":"Displays information about the current server. Some details are hidden from non-admins for security reasons.","title":"\u2139\ufe0f !serverinfo"},{"location":"User-Manual-%26-Feature-Showcase/#incognito-player","text":"A powerful command that allows admins to hide themselves from other players in the server by vanishing from their player lists. Return to Top That's all, folks! Notice anything wrong? Submit an issue here or discuss it in our official Discord server .","title":"\ud83d\udd75\ufe0f :incognito &lt;player&gt;"},{"location":"_Sidebar/","text":"Home User Manual & Feature Showcase _G API Plugins and Modules Structure Guides Creating a theme Tables The \"Service\" Metatable server.Admin server.Anti server.Commands server.Core server.Functions server.HTTP server.Logs server.Process server.Remote server.Variables","title":" Sidebar"},{"location":"_Sidebar/#guides","text":"Creating a theme","title":"Guides"},{"location":"_Sidebar/#tables","text":"The \"Service\" Metatable server.Admin server.Anti server.Commands server.Core server.Functions server.HTTP server.Logs server.Process server.Remote server.Variables","title":"Tables"}]}