{"config":{"lang":["en"],"separator":"[\\s\\-\\.]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Adonis is a community-maintained server management and moderation system created by Sceleratis (Davey_Bones).</p> <p>\ud83d\udc49 Refer to the side panel for specific sections/information.</p> <p>\ud83d\udcd8 User Manual: https://github.com/Epix-Incorporated/Adonis/wiki/User-Manual-&amp;-Feature-Showcase</p> <p>Documentation is currently work-in-progress.</p> <p>Documentation for the Adonis _G API can be found here.</p>"},{"location":"#contributing","title":"\u2b50 Contributing","text":"<p>View the contribution guidelines and instructions here if you'd like to contribute to the Adonis project.</p>"},{"location":"#links","title":"\ud83d\udd17 Links","text":"<ul> <li>Adonis Loader: https://www.roblox.com/library/7510622625/Adonis-Loader</li> <li>Adonis MainModule: https://www.roblox.com/library/7510592873/Adonis-MainModule</li> <li>Nightly MainModule: https://www.roblox.com/library/8612978896/Nightlies-Adonis-MainModule</li> </ul>"},{"location":"Plugins-%26-Modules/","title":"Plugins & Modules","text":"<p>Adonis expects any modules it's loading to return a function containing the module's code to run. Adonis will require the module, set the returned function's environment to a custom one containing all important variables, and will execute the function.</p> <p>Plugins are loaded without yielding and will be loaded only after all of the core modules are loaded. </p>"},{"location":"Plugins-%26-Modules/#user-defined-modules-plugins","title":"User-defined modules (plugins)","text":"<p>Developers can create custom modules for Adonis to load without needing to alter Adonis's MainModule.  Simply add modules to <code>Adonis_Loader</code> &gt; <code>Config</code> &gt; <code>Plugins</code></p> <p>\ud83d\udc49 Server modules should have names starting with \"Server:\" or \"Server-\"</p> <p>\ud83d\udc49 Client modules should have names starting with \"Client:\" or \"Client-\"</p> <p>Example: \"Server: CustomChatHandler\"</p> <p>The module's name will be used by Adonis to determine if the module is a client plugin or a server plugin. The modules will be loaded after the \"Core\" modules finish loading.</p> <p>Plugins have the same level of access as any of Adonis's \"Core\" modules. Because of this, plugin modules are free to add, remove, and change whatever they like. It is advised, however, that you avoid removing any existing tables, functions, or objects and instead replace them with \"dummy\" alternatives to avoid causing serious errors.</p>"},{"location":"Plugins-%26-Modules/#example-server-plugin","title":"Example server plugin","text":"<p>The following is an example server plugin</p> <pre><code>return function(Vargs)\n    local server = Vargs.Server\n    local service = Vargs.Service\n\n        --// Add a new command to the Commands table at index \"ExampleCommand1\"\n    server.Commands.ExampleCommand1 = {                     --// The index &amp; table of the command\n        Prefix = server.Settings.Prefix;                    --// The prefix the command will use, this is the ':' in ':ff me'\n        Commands = {\"examplecommand1\", \"examplealias1\", \"examplealias2\"};   --// A table containing the command strings (the things you chat in-game to run the command, the 'ff' in ':ff me')\n        Args = {\"arg1\", \"arg2\", \"etc\"};                     --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the 'me' in ':ff me'\n        Description = \"Example command\";                    --// The description of the command\n        AdminLevel = 100; -- Moderators                     --// The command's minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, \"HeadAdmins\", etc};\n        --// Alternative option: AdminLevel = \"Moderators\";\n        Filter = true;                              --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players\n        Fun = false;                                --// Is this command considered as fun?\n        Hidden = true;                              --// Should this command be hidden from the command list?\n        Disabled = true;                            --// Should this command be unusable?\n        NoStudio = false;                           --// Should this command be blocked from being executed in a Studio environment?\n        NonChattable = false;                           --// Should this command be blocked from being executed via chat?\n        CrossServerDenied = false;                      --// If true, this command will not be usable via :crossserver\n        Function = function(plr: Player, args: {string}, data: {})      --// The command's function; This is the actual code of the command which runs when you run the command\n            --// \"plr\" is the player running the command\n            --// \"args\" is a table containing command arguments supplied by the user\n            --// \"data\" is a table containing information related to the command and the player running it, such as data.PlayerData.Level (the player's admin level)\n            print(\"This is 'arg1':\", args[1])\n            print(\"This is 'arg2':\", args[2])\n            print(\"This is 'etc'(arg 3):\", args[3])\n            error(\"this is an example error :o !\")\n        end\n    }\nend\n</code></pre> <p>In this example, we create a new command named \"ExampleCommand1\" which can be ran using \":examplecommand1\" (assuming the command Prefix is set to \":\" in loader settings).</p> <p>In the same way we can add commands, we can use the same method to remove or alter commands. Instead of creating an entirely new command named ExampleCommand, the following would remove the command \":ff\" from the script and make it so the :kick command still exists but does nothing. </p> <p><pre><code>return function(Vargs)\n    local server = Vargs.Server\n    local service = Vargs.Service\n\n    --// Remove ForceField from the Commands table\n    server.Commands.ForceField = nil\n\n    --// Change the Kick command to do nothing:\n    server.Commands.Kick.Function = function(plr: Player, args: {string})\n        print(plr.Name ..\" tried to kick someone\")\n    end\nend\n</code></pre> If you wish to do this, refer to the appropriate commands module located under <code>MainModule</code> &gt; <code>Server</code> &gt; <code>Commands</code> to view the internal index of a command. Alternatively, you may run <code>:cmdinfo &lt;command&gt;</code> in-game which will also display the command's index.</p>"},{"location":"Structure/","title":"File Structure","text":"<p>The internal file structure of both Adonis's client and server can be broken down into four main parts:</p>"},{"location":"Structure/#core","title":"Core","text":"<p>This folder contains modules essential to the script's functionality. When Adonis starts, all modules within the core folder are loaded in a specific order. These modules must be loaded, in order, before the script can start doing anything. </p>"},{"location":"Structure/#server-load-order","title":"Server Load Order:","text":"<ol> <li>Service</li> <li>Logs</li> <li>Variables</li> <li>Core</li> <li>Remote</li> <li>Functions</li> <li>Process</li> <li>Admin</li> <li>HTTP</li> <li>Anti</li> <li>Commands</li> </ol>"},{"location":"Structure/#client-load-order","title":"Client Load Order:","text":"<ol> <li>Service </li> <li>Variables</li> <li>UI</li> <li>Core</li> <li>Remote</li> <li>Functions</li> <li>Process</li> <li>Anti</li> </ol>"},{"location":"Structure/#dependencies","title":"Dependencies","text":"<p>All dependencies of the client or server are contained within the respective \"Dependencies\" folder. This can include pre-made scripts and UI elements.</p>"},{"location":"Structure/#plugins","title":"Plugins","text":"<p>The \"Plugins\" folders specific non-essential modules to be loaded. The server will automatically populate the client's Plugins folder if user defined client plugins are present in Loader &gt; Config &gt; Plugins</p>"},{"location":"Structure/#main-scripts","title":"Main Scripts","text":""},{"location":"Structure/#server","title":"Server","text":"<p>Handles the server-side loading process.</p>"},{"location":"Structure/#client","title":"Client","text":"<p>Handles the client-side loading process.</p>"},{"location":"Structure/#code-structure","title":"Code Structure","text":"<p>Adonis has three main tables that nearly all variables, functions, settings, objects, and folders, can be accessed from. </p>"},{"location":"Structure/#server-client","title":"\"server\" &amp; \"client\"","text":"<p>The \"server\" and \"client\" variables are tables containing everything related to Adonis's functionality. This includes any tables, functions, and variables added by loaded modules.</p>"},{"location":"Structure/#service","title":"service","text":"<p>The \"service\" metatable is a variable unique to Adonis and it's modules that provides many functions and services used throughout both the client and server. Within the service metatable are functions to handle anything from task creation and tracking to object deletion. If the index requested is not found within the service table, it will return a game service matching the index if it can. (Specifically, it just returns <code>game:GetService(index)</code>.)</p>"},{"location":"User-Manual-%26-Feature-Showcase/","title":"Contents","text":"<ol> <li>Command Usage Guide</li> <li>The \"UserPanel\" GUI</li> <li>UI Themes Showcase</li> <li>Moderation Commands Reference</li> <li>Adonis Features Showcase</li> </ol>   ## \u2139\ufe0f **Notice**  **This manual is intended for regular users, moderators and admins in ROBLOX games using the Adonis admin system. For guidance on installing Adonis in your game as a developer, please refer to the [README](https://github.com/Sceleratis/Adonis/blob/master/README.md) file in the repository. For API documentation, navigate to the [other pages](https://github.com/Sceleratis/Adonis/wiki) on this wiki.**"},{"location":"User-Manual-%26-Feature-Showcase/#section-1-command-usage-guide","title":"Section 1: Command Usage Guide","text":""},{"location":"User-Manual-%26-Feature-Showcase/#execution","title":"Execution","text":"<p>These are the following ways by which an Adonis command can be executed by a user: - by chat (as long as chat commands have not been disabled) - by command console (default keybind for opening the console is <code>'</code>; the console may be restricted or disabled according to settings) - by other interfaces such as <code>:cmdbox</code></p> <p>In all cases, the prefix (which is <code>:</code> by default for admin commands and <code>!</code> by default for player commands) must be included at the start of each command for it to work.</p> <p>\u2139\ufe0f Tip: To run a command silently in the chat (so that other players do not see it), either prepend it with \"/e \" (eg. \"/e :kill scel\") or enable chat command hiding in your client settings.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#player-selectors","title":"Player Selectors","text":"<p>Commands that take players as their argument (eg. <code>:kill</code>) will normally support either a singular player or a comma-separated list of player names.</p> <p>Example: <code>:god scel</code> or <code>:kill noob1,noob2</code></p> <p>Note that player names are not case-sensitive and may be partial, eg. <code>scel</code> for <code>Sceleratis</code>.</p> <p>In addition to simply using player names, the following special identifiers for targeting certain groups of players exist: - <code>me</code> - yourself (the executor of the command) - <code>all</code> - everyone in the server - <code>others</code> - everyone in the server except yourself - <code>admins</code> - all admins in the server - <code>nonadmins</code> - everyone except admins in the server - <code>random</code> - a random person in the server - <code>#NUM</code> -  random players in the server - <code>@USERNAME</code> - targets a specific player whose username is exactly  - <code>%TEAM</code> - members of the team  - <code>$GROUPID</code> - members of the group with ID  (number found in the Roblox group webpage URL) - <code>radius-NUM</code> - anyone within a -stud radius of you <p>Placing <code>-</code> before any selector or player name will invert the selection and select everyone except those within the selection defined after <code>-</code>. To illustrate, using the <code>others</code> selector is essentially the same as doing <code>all,-me</code>.</p> <p>Example: <code>:explode -radius-10</code> - explodes all players further than 10 studs from you.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#batch-commands","title":"Batch Commands","text":"<p>Multiple commands can be ran sequentially at a time by separating them using the batch key, which defaults to <code>|</code> (vertical pipe).</p> <p>Additionally, you can insert timed delays using <code>!wait &lt;duration in seconds&gt;</code>.</p> <p>Example: <code>:ff me | :m Exploding everyone in 10 seconds! | !wait 10 | :explode all</code> - gives you a forcefield and makes a message announcement, waits 10 seconds, then explodes everyone.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#repetition","title":"Repetition","text":"<p>Admins/moderators by default have access to the <code>:repeat &lt;times&gt; &lt;delay&gt;</code> command, which easily allows a command to be ran in a loop.</p> <p>Example: <code>:repeat 10 1 :sword me | :heal me</code> - will give you a sword and heal yourself once every 1 second, for 10 times.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#reference-commands","title":"Reference Commands","text":"<ul> <li><code>:cmds</code> for a list of available commands</li> <li><code>:cmdinfo &lt;command&gt;</code> for detailed info about a specific command</li> <li><code>!brickcolors</code> for a list of valid BrickColors (can be used in some commands which take a brickcolor argument)</li> <li><code>!materials</code> for a list of material types</li> <li><code>:capes</code> for a list of preset capes available to admins</li> <li><code>:musiclist</code> for a list of preset audios</li> <li><code>:insertlist</code> for a list of assets that can be inserted using <code>:insert &lt;name&gt;</code> (set by the developer in <code>settings.InsertList</code>)</li> </ul> <p>Return to Top</p>"},{"location":"User-Manual-%26-Feature-Showcase/#section-2-the-userpanel-gui","title":"Section 2: The \"UserPanel\" GUI","text":"<p>The UserPanel GUI can be used to quickly access certain things in Adonis, such as commands, as well as configure Adonis client or server settings. This wiki page will go over the different tabs within Adonis's UserPanel GUI and what they do.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#info","title":"Info","text":"<p>The info tab shows you information about Adonis, and gives the user convenient buttons to perform actions such as opening the command list, viewing the changelog, viewing credits, getting the loader, or getting the system's source in the form of its MainModule. </p>"},{"location":"User-Manual-%26-Feature-Showcase/#donate","title":"Donate","text":"<p>This is where users can donate to Adonis's development and control settings related to their donator perks. These perks can be disabled by the place owner in the settings module of the Loader. Donation perks are intended to be purely visual and should not impact gameplay. When users donate in your game, Roblox will give the place owner 10% of the sale.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#keybinds","title":"Keybinds","text":"<p>The keybinds tab allows users to bind command strings to a specific key, so when they press that key the specified command gets executed.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#aliases","title":"Aliases","text":"<p>Aliases allow you to create custom commands that point to existing commands, or a combination of existing commands. When creating an alias, you can add markers for command arguments. The order the argument identifiers appear in the command string is the order the arguments will be replaced in.</p> <p>To better understand lets go through what's going on in the above screenshot: The command string <code>:kill &lt;arg1&gt; | :fire &lt;arg1&gt; &lt;arg2&gt;</code> is bound to <code>:killfire</code> The following happens when <code>:killfire scel Really red</code> is ran:</p> <ol> <li>In the command string, both substrings for <code>&lt;arg1&gt;</code> is replaced with <code>scel</code> and the substring <code>&lt;arg2&gt;</code> is replaced with <code>Really red</code></li> <li><code>:killfire scel Really red</code> is replaced by <code>:kill scel | :fire scel Really red</code>.</li> <li>The new command string gets processed like any other command. In this case we are running two commands at once, in other words a \"batch\" command as indicated by the <code>|</code> separating the two commands. The BatchKey setting can be used to change the <code>|</code> (vertical pipe) to whatever you'd like as long as it is not the same as the SplitKey or any of the Prefix settings.</li> </ol> <p>It's important to note that the number of arguments is determined by the number of unique argument identifiers. Also, the actual text within the argument identifier is not important and is only used to match user-supplied arguments to where they should be. The order that these unique argument identifiers appear in the command string is what determines which which identifier will match argument 1, the next unique one found being argument 2, and so on. This is important to keep in mind. If you were to change the command string to <code>:kill &lt;arg2&gt; | :fire &lt;arg2&gt; &lt;arg1&gt;</code> and then chatted <code>:killfire scel Really red</code> <code>scel</code> would be assigned to <code>&lt;arg2&gt;</code> and <code>Really red</code> would be assigned to <code>&lt;arg1&gt;</code> so <code>:killfire Really red scel</code> would not work (as <code>:kill scel</code> would now be <code>:kill Really red</code>) It should also be noted that arguments that are intended to take spaces must appear last as otherwise portions of them may be treated as part of previous arguments when using the default SplitKey (a blank space.)</p> <p>This system is currently still in development and may see improvements in the near future, such as manually defining in the alias string how arguments should be interpreted and matched to the command string. For now, you should not add argument indicators to the alias string. They should only be in the command string, and the order they appear is what currently determines the argument position they will be matched to in the chatted message. </p>"},{"location":"User-Manual-%26-Feature-Showcase/#client","title":"Client","text":"<p>You've likely noticed that the UserPanel GUI in the screenshots here does not look like the default UserPanel. This is because Adonis supports multiple themes, my personal favorite being the Rounded theme (the one seen in these screenshots.) The default theme is named \"Default\" and is used for all UI development, and determines the default GUIs and UI modules used in the event the selected theme does not have the GUI being generated.</p> <p>Users can choose what theme they would like to use by clicking the text next to the arrow pointing down next to the \"Theme\" listing.</p> <p>There are also a few other client-specific settings. It should be noted that these settings are user-specific and only affect the user's client. They are not game breaking and only seek to offer finer control over certain things if the user wishes to do so.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#client-settings","title":"Client Settings","text":"Setting Description Keybinds Enables/Disables keybinds (if disabled, keybinds will no longer work until re-enabled) UI Keep Alive Determines whether or not Adonis should attempt to prevent the deletion of its GUIs when the player respawns. Particle Effects Adonis contains a number of commands that involve particle effects, which for some users may be irritating or even performance-impacting. All particle effects are local to each client and as such can be toggled using this setting. Capes Like particle effects, capes (such as donor capes) are handled locally and can be disabled. Hide Chat Commands Whether Adonis commands that you run via the chat will automatically be hidden from other players. Console Key This is the key that will open/close the command console (the bar that appears when you press the Quote key by default). Theme Allows you to select the UI theme you want to use. Changing this to \"Game Theme\" will use whatever theme is set in the Adonis settings module (in the Loader). This is used by default for all new users."},{"location":"User-Manual-%26-Feature-Showcase/#game","title":"Game","text":"<p>This is where creators can control Adonis related server settings for their game while in-game instead of in studio. \"Clear all saved settings\" will clear any settings previously written to the datastore. This is especially useful if you encounter issues after changing a setting in-game or quickly want to revert to only what is set within the settings module. Anything with \"Cannot change\" next to it can only be changed in studio currently.</p> <p>If you ever change the prefix in-game and suddenly find yourself unable to open settings to fix it, running <code>:adonissettings</code> will open the UserPanel GUI and focus the \"Game\" tab so you can fix any issues. The <code>:adonissettings</code> command will always use <code>:</code> as a prefix so you can't accidentally change it to something unusable.</p> <p>Return to Top</p>"},{"location":"User-Manual-%26-Feature-Showcase/#section-3-ui-themes-showcase","title":"Section 3: UI Themes Showcase","text":"<p>The following are the themes that come with Adonis by default:</p>"},{"location":"User-Manual-%26-Feature-Showcase/#default","title":"Default","text":"GUI Screenshot UserPanel HelpButton Console Notification Message Hint Error"},{"location":"User-Manual-%26-Feature-Showcase/#rounded","title":"Rounded","text":"GUI Screenshot UserPanel Console Notification Error"},{"location":"User-Manual-%26-Feature-Showcase/#colorize","title":"Colorize","text":"<p>Note: rainbow effects are animated with chromatic interpolation.</p> GUI Screenshot UserPanel Console Notification Message Hint Error"},{"location":"User-Manual-%26-Feature-Showcase/#basicadmin","title":"BasicAdmin","text":"<p>This theme only changes the announcement GUIs.</p> GUI Screenshot Message"},{"location":"User-Manual-%26-Feature-Showcase/#aero","title":"Aero","text":"<p>Made by @Expertcoderz.</p> GUI Screenshot UserPanel HelpButton Console Notification Message Hint Error"},{"location":"User-Manual-%26-Feature-Showcase/#unity","title":"Unity","text":"<p>Made by @LolloDev5123.</p> GUI Screenshot UserPanel HelpButton Console Notification Message Error"},{"location":"User-Manual-%26-Feature-Showcase/#windows-xp","title":"Windows XP","text":"<p>Made by @P3tray.</p> GUI Screenshot UserPanel HelpButton Console Notification Message Hint Error <p>Return to Top</p>"},{"location":"User-Manual-%26-Feature-Showcase/#section-4-moderation-commands-reference","title":"Section 4: Moderation Commands Reference","text":"<p>This section serves as a basic reference guide for the essential moderation commands offered by Adonis.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#general","title":"General","text":""},{"location":"User-Manual-%26-Feature-Showcase/#kick-player-reason","title":"<code>:kick &lt;player&gt; &lt;reason&gt;</code>","text":"<p>Disconnects the specified player from the server. If specified, the reason is shown to the player.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#warning-players","title":"Warning Players","text":""},{"location":"User-Manual-%26-Feature-Showcase/#warnings-player","title":"<code>:warnings &lt;player&gt;</code>","text":"<p>Displays the specified player's warning log.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#warn-player-reason","title":"<code>:warn &lt;player&gt; &lt;reason&gt;</code>","text":"<p>Gives the specified player a warning, upon which they will be notified with the reason.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#kickwarn-player-reason","title":"<code>:kickwarn &lt;player&gt; &lt;reason&gt;</code>","text":"<p>Gives the specified player a warning and kicks them; displays the warning reason in their kick message.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#removewarning-player-reason","title":"<code>:removewarning &lt;player&gt; &lt;reason&gt;</code>","text":"<p>Deletes the specified warning from the player's warning log.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#clearwarnings-player","title":"<code>:clearwarnings &lt;player&gt;</code>","text":"<p>Clears the player's warning log.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#banning-players","title":"Banning Players","text":""},{"location":"User-Manual-%26-Feature-Showcase/#banlist","title":"<code>:banlist</code>","text":"<p>Displays a list of normal bans.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#timebanlist","title":"<code>:timebanlist</code>","text":"<p>Displays a list of time-banned users.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#trellobanlistsbl","title":"<code>:trellobanlist/:sbl</code>","text":"<p>Displays a list of users banned via Trello; only applicable if Trello integration is configured.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#banserverban-player-reason","title":"<code>:ban/:serverban &lt;player&gt; &lt;reason&gt;</code>","text":"<p>Bans the specified player from the current server. Note that they may still be able to join other servers.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#permbangameban-player-reason","title":"<code>:permban/:gameban &lt;player&gt; &lt;reason&gt;</code>","text":"<p>Bans the specified player from all game servers, for an indefinite amount of time. Enforced immediately, so if the user is in a server other than where the command is run, they will be kicked by the system.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#tempbantimeban-player-duration-smhd-reason","title":"<code>:tempban/:timeban &lt;player&gt; &lt;duration (s/m/h/d)&gt; &lt;reason&gt;</code>","text":"<p>Bans the specified player from all game servers, for a specific amount of time. Enforced immediately.</p> <p>Example: <code>:tempban Player1 3d</code> -- globally-bans Player1 for 3 days.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#trelloban-player-reason","title":"<code>:trelloban &lt;player&gt; &lt;reason&gt;</code>","text":"<p>Adds the specified player to the Trello ban list, if Trello integrations are configured for the game.</p> <p>\u2139\ufe0f Tip: The above commands support full usernames for the <code>&lt;player&gt;</code> argument, which means you can ban specific users who are not currently in your server.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#player-notes","title":"Player Notes","text":""},{"location":"User-Manual-%26-Feature-Showcase/#notes-player","title":"<code>:notes &lt;player&gt;</code>","text":"<p>Displays a list of notes on the specified player.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#note-player-note","title":"<code>:note &lt;player&gt; &lt;note&gt;</code>","text":"<p>Sets a note on the specified player.</p>"},{"location":"User-Manual-%26-Feature-Showcase/#removenote-player-note","title":"<code>:removenote &lt;player&gt; &lt;note&gt;</code>","text":"<p>Removes a note from a specified player. Specify <code>all</code> for <code>&lt;note&gt;</code> to clear all notes on that player.</p> <p>Return to Top</p>"},{"location":"User-Manual-%26-Feature-Showcase/#section-5-adonis-features-showcase","title":"Section 5: Adonis Features Showcase","text":"<p>Here's a miscellaneous collection of some interesting features that many users of the Adonis admin system may not be aware of:</p>"},{"location":"User-Manual-%26-Feature-Showcase/#teams","title":"\ud83d\udea9 <code>:teams</code>","text":"<p>This is an interface that allows you to view, create, delete and join teams easily.</p> <p></p>"},{"location":"User-Manual-%26-Feature-Showcase/#tools-inventory-monitor-gui","title":"\ud83d\udee0\ufe0f <code>:tools</code> -- Inventory Monitor GUI","text":"<p>This utility allows you to view and manage players' backpacks via a user-friendly realtime inventory monitoring interface. An alternative to manually running the <code>:viewtools &lt;player&gt;</code>, <code>:removetool &lt;player&gt; &lt;tool name&gt;</code> and <code>:removetools &lt;player&gt;</code> commands.</p> <p></p>"},{"location":"User-Manual-%26-Feature-Showcase/#explorer","title":"\ud83d\udcc2 <code>:explorer</code>","text":"<p>This is a built-in alternative to <code>:dex</code> which allows you to view and navigate the game's file structure as well as delete objects.</p> <p></p>"},{"location":"User-Manual-%26-Feature-Showcase/#players","title":"\ud83d\udcc3 <code>:players</code>","text":"<p>Displays full a list of in-game players along with some live-updated info about the state of their characters; may be useful for moderators if your game has the regular player list GUI hidden.</p> <p></p>"},{"location":"User-Manual-%26-Feature-Showcase/#profile-player","title":"\ud83d\udd0d <code>!profile &lt;player&gt;</code>","text":"<p>Displays quite comprehensive information about a specific player.</p> <p>Some details such as safechat status and the \"Game\" tab are hidden from non-admins for security reasons.</p> <p></p>"},{"location":"User-Manual-%26-Feature-Showcase/#i-serverinfo","title":"\u2139\ufe0f <code>!serverinfo</code>","text":"<p>Displays information about the current server.</p> <p>Some details are hidden from non-admins for security reasons.</p> <p></p>"},{"location":"User-Manual-%26-Feature-Showcase/#incognito-player","title":"\ud83d\udd75\ufe0f <code>:incognito &lt;player&gt;</code>","text":"<p>A powerful command that allows admins to hide themselves from other players in the server by vanishing from their player lists.</p> <p>Return to Top</p> <p>That's all, folks!</p> <p><sub>Notice anything wrong? Submit an issue here or discuss it in our official Discord server.</sub></p>"},{"location":"guides/creating-a-theme/","title":"Getting started","text":"<p>In order to create a theme, you must have the Adonis Loader inside your game. You will also need to have access to the Adonis MainModule, but you do not need to keep this.</p>"},{"location":"guides/creating-a-theme/#part-1","title":"Part 1","text":""},{"location":"guides/creating-a-theme/#copying-the-theme","title":"Copying the theme","text":"<p>Go to the temporary Adonis MainModule copy and go to <code>MainModule &gt; Client &gt; UI</code>. This will allow you to see all the UI themes that Adonis uses. Select whichever one it is that you would like to base your new theme on! In our example, we will use Unity. </p>"},{"location":"guides/creating-a-theme/#transferring-the-theme","title":"Transferring the theme","text":"<p>Copy the theme you wish to base your new theme on and paste it in your loader at: <code>Adonis_Loader &gt; Config &gt; Themes</code>. You can now delete MainModule if you wish. </p>"},{"location":"guides/creating-a-theme/#part-2","title":"Part 2","text":""},{"location":"guides/creating-a-theme/#setting-up-your-new-theme","title":"Setting up your new theme","text":"<ol> <li>Now you've successfully copied your theme over to your loader, you can start setting it up. Rename the theme to whatever it is you wish for it to be called. In this guide we will call it <code>ExampleTheme</code>.</li> <li>Now check that your theme has a StringValue inside called <code>Base_Theme</code>. If it doesn't, create it! This is the theme that Adonis will use if it cannot find a specific GUI. In our example we will set this to Aero.</li> <li>You've successfully installed the new theme! You can now select it in the menu. However, at the moment it is the exact same as another theme.</li> </ol>"},{"location":"guides/creating-a-theme/#creating-your-new-theme","title":"Creating your new theme","text":"<ul> <li>Now it's time to customise your new theme. You can delete any GUIs you don't want to customise, and Adonis will automatically use the Base_Theme for these cases.</li> <li>In this example, we will turn the colour of the UI into red and change the font to Source Sans Pro. </li> <li> <ul> <li>To do this, we will go to <code>ExampleTheme &gt; Window &gt; Drag</code> and change the FontFace from Ubuntu to Source Sans Pro. Then we will go into Drag and change the background frame to Red.</li> </ul> </li> <li>You can edit the UI further. If you wish to see the changes you are making, drag the ScreenGui into StarterGui. Just remember to put it back into the theme folder when you're done editing!</li> <li>Additionally, you can also edit the UI code to include new features or change existing ones, such as click sounds.</li> <li> <ul> <li>Note that some UIs do not have ScreenGuis by default (such as Notifications/Hints)- this is intentional and you will have to add a ScreenGui to see these in StarterGui.</li> </ul> </li> </ul> <p>Congratulations! Just publish the game and you've successfully made an Adonis theme. If you have any queries, or would like to see a different guide, just ask in our communications server.</p>"},{"location":"tables/server/admin/","title":"Admin","text":"<p>The 'Admin' sub-table (server.Admin) contains admin-related functions and variables. The below functions can be accessed as members of server.Admin (For example: server.Admin.GetLevel(p))</p>"},{"location":"tables/server/admin/#dohidechatcmd-player-object-message-string-data-optional-player-data-table","title":"DoHideChatCmd (Player (Object), Message (String), Data (Optional Player Data Table))","text":"<p>Checks whether or not to hide commands ran from the chat for the specific player.</p>"},{"location":"tables/server/admin/#gettruerank-player-object-groupid-int","title":"GetTrueRank (Player (Object), GroupId (Int))","text":"<p>Deprecated Runs GetRankInGroup from the target player's client and returns the result. This is intended to be a less secure way to avoid group rank caching, however due to security concerns should really not be used. </p>"},{"location":"tables/server/admin/#getplayergroup-player-object-groupname-or-groupid-string-or-int","title":"GetPlayerGroup (Player (Object), GroupName or GroupId (String or Int))","text":"<p>Checks groups the player is in against the GroupName/GroupId provided and returns the group if found.</p> <p>Returns: Group</p>"},{"location":"tables/server/admin/#ismuted-player-object","title":"IsMuted (Player (Object))","text":"<p>Checks if the given player is muted.</p> <p>Returns true if muted</p>"},{"location":"tables/server/admin/#docheck-player-object-string-int-check-string-int-table","title":"DoCheck (Player (Object, String, Int), Check (String, Int, Table))","text":"<p>Checks the given player/string/int (Player) against the given string/int/table (Check) and will return true if they match. This function is responsible for checking if a given player/input matches something else. For example, DoCheck(Player, \"Group:181\") would return true if Player is in the group with ID 181.</p> <p>Returns: true if matched, false or nil if not</p>"},{"location":"tables/server/admin/#updatecachedlevel-player-object","title":"UpdateCachedLevel (Player (Object))","text":"<p>Updates the cached version of the player's admin level. Admin levels are cached for a set period of time to lower any performance impacts that may arise from constantly checking if a player is an admin.</p> <p>Returns: AdminLevel</p>"},{"location":"tables/server/admin/#leveltolist-level-int","title":"LevelToList (Level (Int))","text":"<p>Takes a given level value and returns the list the level belongs to. This may become inaccurate if there are multiple lists/admin ranks that share the same level. If there are multiple ranks with the same level, built in/default ranks (HeadAdmins, Admins, Moderators, Creators) will be preferred over custom ranks.</p> <p>Returns: list.Users, listName, list</p>"},{"location":"tables/server/admin/#leveltolistname-level-int","title":"LevelToListName (Level (Int))","text":"<p>Similar to LevelToList however only returns the name of the found rank. </p> <p>Returns: RankName</p>"},{"location":"tables/server/admin/#getlevel-player-object","title":"GetLevel (Player (Object))","text":"<p>Returns the admin level for the given player. This will match the level of the highest admin rank the player belongs to. The default level values are: Place Owner: 1000 Creators: 900 HeadAdmins: 300 Admins: 200 Moderators: 100 Players: 0</p> <p>Returns: AdminLevel</p>"},{"location":"tables/server/admin/#getupdatedlevel-player-object","title":"GetUpdatedLevel (Player (Object))","text":"<p>Gets the updated admin level for the provided player. This called automatically when the cached version of the player's admin level expires and should not be used too often for performance reasons.</p> <p>Returns: AdminLevel</p>"},{"location":"tables/server/admin/#checkadmin-player-object","title":"CheckAdmin (Player (Object))","text":"<p>Returns true if the player is an admin (level &gt; 0), false if not.</p> <p>Returns: boolean</p>"},{"location":"tables/server/admin/#setlevel-player-object-newlevel-int","title":"SetLevel (Player (Object), NewLevel (Int))","text":"<p>Sets the target player's level to the new level indicated. Cannot set level of any user at level 1000 or higher (place owner) This will not change the player's rank, but will rather set a \"level override\" via Admin.SpecialLevels which takes priority over rank tables.</p>"},{"location":"tables/server/admin/#istempadmin-player-object","title":"IsTempAdmin (Player (Object))","text":"<p>Returns true if the player is a temporary administrator.</p>"},{"location":"tables/server/admin/#removeadmin-player-object-istemp-optional-bool","title":"RemoveAdmin (Player (Object), isTemp (Optional Bool))","text":"<p>Removes the target player as an admin. If isTemp is true, it will remove them from the TempAdmins table. </p>"},{"location":"tables/server/admin/#addadmin-player-object-level-stringint-istempbool","title":"AddAdmin (Player (Object), Level (String/Int), isTemp(Bool))","text":"<p>Makes the target player an admin, removing them from the admin table they are currently in (if any.) If isTemp is true, will make them a temporary admin. If Level is a string it will be converted to it's level equivalent if possible. </p>"},{"location":"tables/server/admin/#checkdonor-player-object","title":"CheckDonor (Player (Object))","text":"<p>Checks if the player is a donor.</p> <p>Returns: true if donor</p>"},{"location":"tables/server/admin/#checkban-player-object","title":"CheckBan (Player (Object))","text":"<p>Checks if the given player is banned.</p> <p>Returns: true if banned</p>"},{"location":"tables/server/admin/#addban-player-object-reason-string-dosave-bool-moderator-object","title":"AddBan (Player (Object), Reason (String), doSave (Bool), moderator (Object))","text":"<p>Bans Player with the given Reason and will save if doSave is true.</p>"},{"location":"tables/server/admin/#dobancheck-player-string-int-check-string-int-table","title":"DoBanCheck (Player (String, Int), Check (String, Int, Table))","text":"<p>Similar to Admin.DoCheck but specifically for bans. </p> <p>Returns: true if matched, false if not</p>"},{"location":"tables/server/admin/#removeban-player-string-int-dosave-bool","title":"RemoveBan (Player (String, Int), doSave (Bool))","text":"<p>Unbans the given player name/id/etc and will save if doSave is true.</p>"},{"location":"tables/server/admin/#runcommand-command-string-argstuple-tuple","title":"RunCommand (Command (String), ArgsTuple (Tuple))","text":"<p>Runs the given command with the given arguments as the server.</p>"},{"location":"tables/server/admin/#runcommandasplayer-command-string-player-object-argstuple-tuple","title":"RunCommandAsPlayer (Command (String), Player (Object), ArgsTuple (Tuple))","text":"<p>Runs the given command as the given player with the given arguments. Overrides player's level.</p>"},{"location":"tables/server/admin/#runcommandasnonadmin-command-string-player-object-argstuple-tuple","title":"RunCommandAsNonAdmin (Command (String), Player (Object), ArgsTuple (Tuple))","text":"<p>Runs the given command as the given player with the given arguments. Treats the player as a non-admin. Overrides command level.</p>"},{"location":"tables/server/admin/#cachecommands","title":"CacheCommands ()","text":"<p>Updates the command cache. Commands are cached to avoid performance impacts caused by constantly iterating through and checking the entirety of the commands table whenever a player chats or runs a command. If a command is added after this is called, it might not appear in-game until this function is called to forcibly re-cache all commands. </p>"},{"location":"tables/server/admin/#getcommand-command-string","title":"GetCommand (Command (String))","text":"<p>Based on the command provided, will return the command's Index, DataTable, and the command string that was matched from the given string. </p> <p>Returns: String, Table, String</p>"},{"location":"tables/server/admin/#findcommands-command-string","title":"FindCommands (Command (String))","text":"<p>Returns a list of commands matching 'Command'</p>"},{"location":"tables/server/admin/#setpermission-command-string-newlevel-string-int","title":"SetPermission (Command (String), NewLevel (String, Int))","text":"<p>Sets the AdminLevel of all commands matching 'Command' to 'NewLevel'</p>"},{"location":"tables/server/admin/#formatcommand-command-table","title":"FormatCommand (Command (Table))","text":"<p>Converts data about the given command into a string that can be used in :cmds, the console, etc.</p>"},{"location":"tables/server/admin/#checktable-check1-player-string-int-table","title":"CheckTable (Check1 (Player, String, Int), Table)","text":"<p>Check 'Check1' against all entries in 'Table'</p> <p>Returns: true if match is found</p>"},{"location":"tables/server/admin/#checkaliasblacklist-alias-string","title":"CheckAliasBlacklist (Alias (String)","text":"<p>Checks if a given alias is blacklisted. This is to prevent the accidental override of important commands, such as those used to alter aliases. </p> <p>Returns: true if blacklisted</p>"},{"location":"tables/server/admin/#getargs-message-string-numargs-int-additionalargs-tuple","title":"GetArgs (Message (String), NumArgs (Int), AdditionalArgs (Tuple))","text":"<p>Returns a table containing all arguments extracted from 'Message'</p> <p>Returns: Args table</p>"},{"location":"tables/server/admin/#aliasformat-aliases-table-message-string","title":"AliasFormat (Aliases (Table), Message (String))","text":"<p>Alters the given message based on aliases found in the provided alias table 'Aliases.'</p> <p>Returns: Updated message string</p>"},{"location":"tables/server/admin/#iscomlevel-testlevel-int-string-table-comlevel-int-string-table","title":"IsComLevel (TestLevel (Int, String, Table), ComLevel (Int, String, Table))","text":"<p>Checks if 'TestLevel' matches 'ComLevel'</p> <p>Returns: true or index,value if found.</p>"},{"location":"tables/server/admin/#stringtocomlevel-rank-string","title":"StringToComLevel (Rank (String))","text":"<p>Converts 'Rank' to it's level if found.</p> <p>Returns: level</p>"},{"location":"tables/server/admin/#checkcomlevel-playerlevel-int-comlevel-int-string","title":"CheckComLevel (PlayerLevel (Int), ComLevel (Int, String))","text":"<p>Checks if the player's level matches 'ComLevel'</p> <p>Returns: true if matched</p>"},{"location":"tables/server/admin/#isblacklisted-player-object","title":"IsBlacklisted (Player (Object))","text":"<p>Checks if 'Player' is blacklisted.</p> <p>Returns: true if blacklisted</p>"},{"location":"tables/server/admin/#checkpermission-playerdata-table-command-table","title":"CheckPermission (PlayerData (Table), Command (Table))","text":"<p>Checks if 'PlayerData' has permission to use 'Command.' This is responsible for command permission checks when a player runs a command.</p> <p>Returns: true if allowed</p>"},{"location":"tables/server/admin/#searchcommands-player-object-search-string","title":"SearchCommands (Player (Object), Search (String))","text":"<p>Searches commands matching 'Search' that the player is allowed to run. This is mainly used by the console.</p> <p>Returns: Table containing matched commands</p>"},{"location":"tables/server/anti/","title":"Anti","text":"<p>This table contains all server-side anti-exploit related functions/variables. They can be accessed via server.Anti</p>"},{"location":"tables/server/anti/#clienttimeoutlimit","title":"ClientTimeoutLimit","text":"<p>Default: 120 How long a player's client can 'go dark' before the player is kicked from the game. </p>"},{"location":"tables/server/anti/#removeplayer-player-object-reason-optional-string","title":"RemovePlayer (Player (Object), Reason (Optional String))","text":"<p>Removes 'Player' for 'Reason'</p>"},{"location":"tables/server/anti/#checkallclients","title":"CheckAllClients ()","text":"<p>Checks if all clients are alive and responding. If client has not communicated for more than Anti.ClientTimeoutLimit the player the client belongs to will be removed from the server.</p>"},{"location":"tables/server/anti/#userspoofcheck-player-object","title":"UserSpoofCheck (Player (Object))","text":"<p>Attempts to detect username/userid spoofing.</p> <p>Returns: true if spoofing detected</p>"},{"location":"tables/server/anti/#sanitize-object-classlist-table","title":"Sanitize (Object, ClassList (Table))","text":"<p>Searches 'Object' for children matching 'ClassList' and attempts to remove them if found. An example use case would be removing all scripts from a given hat.</p>"},{"location":"tables/server/anti/#isfake-player-object","title":"isFake (Player (Object))","text":"<p>Attempts to determine if a player object is a real player. </p> <p>Returns: true if \"fake\"</p>"},{"location":"tables/server/anti/#removeiffake-player-object","title":"RemoveIfFake (Player (Object))","text":"<p>Removes 'Player' if isFake returns true</p>"},{"location":"tables/server/anti/#findfakeplayers","title":"FindFakePlayers ()","text":"<p>Attempts to find and remove \"fake\" players.</p>"},{"location":"tables/server/anti/#getclassname-object","title":"GetClassName (Object)","text":"<p>Attempts to get the class name of the given 'Object' regardless of whether or not it's RobloxLocked.</p>"},{"location":"tables/server/anti/#rlocked-object","title":"RLocked (Object)","text":"<p>Returns true if 'Object' is RobloxLocked</p>"},{"location":"tables/server/anti/#objrlocked-object","title":"ObjRLocked (Object)","text":"<p>Identical to RLocked.</p>"},{"location":"tables/server/anti/#assignname","title":"AssignName ()","text":"<p>Returns a random 6 digit number.</p>"},{"location":"tables/server/anti/#detected-player-object-action-string-info-string","title":"Detected (Player (Object), Action (String), Info (String))","text":"<p>Actions: Log - Only logs the event Kick - Logs the event and kicks the player Crash - Logs the event and attempts to crash the player in addition to kicking them.</p> <p>This function is called whenever a player is detected by the anti-exploit system. The player and 'Info' are logged and the specified action is performed. </p>"},{"location":"tables/server/anti/#checknameid-player-object","title":"CheckNameID (Player (Object))","text":"<p>Another method to attempt to detect Name/UserId spoofing.</p>"},{"location":"tables/server/commands/","title":"Commands","text":"<p>This is the commands table. It contains all commands to be used by administrators in-game. It does not contain any additional functions or variables.</p> <p>To add a command, simply do: server.Commands.CommandIndexHere = CommandDataTableHere</p> <p>For example: <pre><code>server.Commands.SomeNewCommand = {  --// The index &amp; table of the command\n    Prefix = Settings.Prefix;               --// The prefix the command will use, this is the ':' in ':ff me'\n    Commands = {\"examplecommand\"};  --// A table containing the command strings (the things you chat in-game to run the command, the 'ff' in ':ff me')\n    Args = {\"arg1\", \"arg2\", \"etc\"}; --// Command arguments, these will be available in order as args[1], args[2], args[3], etc; This is the 'me' in ':ff me'\n    Description = \"Example command\";--// The description of the command\n    AdminLevel = 100; -- Moderators --// The commands minimum admin level; This can also be a table containing specific levels rather than a minimum level: {124, 152, \"HeadAdmins\", etc};\n    -- Alternative option: AdminLevel = \"Moderators\"\n    Filter = true;                                  --// Should user supplied text passed to this command be filtered automatically? Use this if you plan to display a user-defined message to other players\n    Hidden = true;                                  --// Should this command be hidden from the command list?\n    Function = function(plr, args, data)    --// The command's function; This is the actual code of the command which runs when you run the command\n        --// \"plr\" is the player running the command\n        --// \"args\" is a table containing command arguments supplied by the user\n        --// \"data\" is a table containing information related to the command and the player running it, such as data.PlayerData.Level (the player's admin level)\n        print(\"This is 'arg1': \".. tostring(args[1]));\n        print(\"This is 'arg2': \".. tostring(args[2]));\n        print(\"This is 'etc'(arg 3): \".. tostring(args[3]));\n    end\n};\n</code></pre></p> <p>Note: After adding new commands it's always a good idea to call Admin.CacheCommands() to ensure they are added to the command cache (otherwise they won't be usable.)</p>"},{"location":"tables/server/core/","title":"Core","text":"<p>This is the \"Core\" table. It houses functions and variables that are essential to the core functionality of Adonis. If something happened to this table or its contents the entire system would become unusable. Functions within this table handle things like initial setup of the RemoteEvent/RemoteFunction, client loading, etc.</p>"},{"location":"tables/server/core/#table-variables","title":"(Table) Variables:","text":"<p>Contains Core-related variables, such as the TimeBans table.</p>"},{"location":"tables/server/core/#datastore-related-variables","title":"Datastore-related variables","text":"<pre><code>--// Datastore update/queue timers/delays\nDS_SetDataQueueDelay = 0.5;\nDS_UpdateQueueDelay = 1;\nDS_AllPlayerDataSaveInterval = 30;\nDS_AllPlayerDataSaveQueueDelay = 0.5;\n\n--// Used to change/\"reset\" specific datastore keys\nDS_RESET_SALTS = {\n    SavedSettings = \"32K5j4\";\n    SavedTables =   \"32K5j4\";\n};\n</code></pre>"},{"location":"tables/server/core/#disconnectevent","title":"DisconnectEvent ()","text":"<p>Disconnects and destroys all events related to security and the RemoteEvent</p>"},{"location":"tables/server/core/#makeevent","title":"MakeEvent ()","text":"<p>Creates the RemoteEvent and RemoteFunction used for server-client communication.</p>"},{"location":"tables/server/core/#updateconnections","title":"UpdateConnections ()","text":"<p>Updates the list of NetworkServer - Player connections</p>"},{"location":"tables/server/core/#updateconnection-player-userdata","title":"UpdateConnection (Player: userdata)","text":"<p>Same as UpdateConnections but for a specific player.</p>"},{"location":"tables/server/core/#getnetworkclient-player-userdata","title":"GetNetworkClient (Player: userdata)","text":"<p>Returns the NetworkClient belonging to 'Player'</p>"},{"location":"tables/server/core/#setupevent-player-userdata","title":"SetupEvent (Player: userdata)","text":"<p>Creates a new player-specific RemoteEvent to be used for client-server communication. Not currently used. </p>"},{"location":"tables/server/core/#prepareclient","title":"PrepareClient ()","text":"<p>Creates a client loader in ReplicatedFirst. Not currently used in favor of handling the client loading process via HookClient(Player)</p>"},{"location":"tables/server/core/#hookclient-player-userdata","title":"HookClient (Player: userdata)","text":"<p>When a player joins this function is called and handles the process of preparing the client and parenting it to the player.</p>"},{"location":"tables/server/core/#loadclientloader-player-userdata","title":"LoadClientLoader (Player: userdata)","text":"<p>Handles the loading of existing players at server startup. Calls Process.PlayerAdded(Player)</p>"},{"location":"tables/server/core/#makeclient","title":"MakeClient ()","text":"<p>Places the client into StarterPlayerScripts. Not currently used in favor of HookClient</p>"},{"location":"tables/server/core/#executepermission-sourcescriptobject-userdata-code-string-islocal-bool","title":"ExecutePermission (SourceScriptObject: userdata, Code: string, isLocal: bool)","text":"<p>Determines if the given script object 'SourceScriptObject' is allowed to run.  If 'Code' is provided it will be used as a pseudo-password. If 'isLocal' is true it will be treated as a LocalScript.</p> <p>Returns: if allowed, table containing Source, noCache, runLimit, number of Executions</p>"},{"location":"tables/server/core/#getscript-scriptobject-userdata-code-string","title":"GetScript (ScriptObject: userdata, Code: string)","text":"<p>Returns the registered script object matching 'ScriptObject' or 'Code'</p>"},{"location":"tables/server/core/#unregisterscript-scriptobject-userdata","title":"UnRegisterScript (ScriptObject: userdata)","text":"<p>Unregisters 'ScriptObject' for execution.</p>"},{"location":"tables/server/core/#registerscript-data-table","title":"RegisterScript (Data: table)","text":"<p>Registers Data.Script as being allowed to execute along with it's related information.</p>"},{"location":"tables/server/core/#getloadstring","title":"GetLoadstring ()","text":"<p>Returns a new loadstring module. </p>"},{"location":"tables/server/core/#bytecode-luacode-string","title":"Bytecode (LuaCode: string)","text":"<p>Converts 'LuaCode' into bytecode and returns the result. This is used before sending any code to run to the client.</p>"},{"location":"tables/server/core/#newscript-class-string-source-string-allowcodes-bool-nocache-bool-runlimit-int","title":"NewScript (Class: string, Source: string, AllowCodes: bool, NoCache: bool, RunLimit: int)","text":"<p>Creates, registers, and returns a new script of class  'Class' </p>"},{"location":"tables/server/core/#saveplayer-player-userdata-data-table","title":"SavePlayer (Player: userdata, Data: table)","text":"<p>Updates Player's data (in Core.PlayerData) do 'Data'</p>"},{"location":"tables/server/core/#defaultplayerdata-player-userdata","title":"DefaultPlayerData (Player: userdata)","text":"<p>Returns the default player data for 'Player'</p>"},{"location":"tables/server/core/#getplayer-player-userdata","title":"GetPlayer (Player: userdata)","text":"<p>Returns the PlayerData for 'Player' Also updates the PlayerData cache and will retrieve data from the datastore if not already cached. </p>"},{"location":"tables/server/core/#clearplayer-player-userdata","title":"ClearPlayer (Player: userdata)","text":"<p>Clears data related to a player, resetting it to the default values. </p>"},{"location":"tables/server/core/#saveplayerdata-player-userdata-customdata-opttable","title":"SavePlayerData (Player: userdata, CustomData: (opt)table)","text":"<p>Save's data for 'Player' to the datastore.</p>"},{"location":"tables/server/core/#saveallplayerdata","title":"SaveAllPlayerData ()","text":"<p>Saves all player data.</p>"},{"location":"tables/server/core/#getdatastore","title":"GetDataStore ()","text":"<p>Returns the DataStore.</p>"},{"location":"tables/server/core/#datastoreencode-key-string","title":"DataStoreEncode (Key: string)","text":"<p>Returns the salted, encrypted, Base64 encoded version of a given key to be used in the datastore.</p>"},{"location":"tables/server/core/#savedata","title":"SaveData (...)","text":"<p>Calls Core.SetData(...)</p>"},{"location":"tables/server/core/#removedata-key-string","title":"RemoveData (Key: string)","text":"<p>Removes 'Key' and related data from the datastore.</p>"},{"location":"tables/server/core/#setdata-key-string-value","title":"SetData (Key: string, Value)","text":"<p>Sets 'Key' to 'Value' in the datastore cache &amp; datastore (when the datastore is updated)</p>"},{"location":"tables/server/core/#updatedata-key-string-function-function","title":"UpdateData (Key: string, Function: function)","text":"<p>Calls UpdateAsync for the given 'Key' with 'Function'</p>"},{"location":"tables/server/core/#getdata-key-string","title":"GetData (Key: string)","text":"<p>Returns data related to 'Key' from the DataCache/datastore</p>"},{"location":"tables/server/core/#indexpathtotable-stringtableancestry-table","title":"IndexPathToTable (string,TableAncestry: table)","text":"<p>Attempts to find the given table based on the path provided. Returns: foundTable, foundTableIndex</p>"},{"location":"tables/server/core/#dosavedata-table","title":"DoSave(Data: table)","text":"<p>Saves settings or tables to the datastore based on information provided in 'Data'</p>"},{"location":"tables/server/core/#loaddata-key-string-data-table","title":"LoadData (Key: string, Data: table)","text":"<p>Loads saved settings, tables, etc.</p>"},{"location":"tables/server/core/#startapi","title":"StartAPI ()","text":"<p>Handles the creation and monitoring of _G.Adonis</p>"},{"location":"tables/server/functions/","title":"Functions","text":"<p>Contains various server-specific miscellaneous functions.</p> <p>\u2139\ufe0f This page is currently incomplete.</p>"},{"location":"tables/server/functions/#addjoinfilter-name-string-function-function","title":"AddJoinFilter (Name (string), Function (function))","text":"<p>Adds the given function as a join filter. Will error if a joinfilter with this name already exists <pre><code>    Functions.AddJoinFilter(\"No_bandits\",function(Player:Player, PlayerData)\n        if Player.Name == \"SimulprodBandit\" then\n            return false, \"Simulprod Bandit\" -- second argument is the reason the player gets kicked\n        end;\n\n        return true;\n    end);\n</code></pre></p>"},{"location":"tables/server/functions/#removejoinfilter-name-string","title":"RemoveJoinFilter (Name (string))","text":"<p>Removes the given joinfilter.</p>"},{"location":"tables/server/functions/#playerfinders","title":"PlayerFinders","text":"<p>These are used when <code>service.GetPlayers</code> is called to search for players based on the user's input. The default built-in player finders (at the time of writing this) can be found below to be used as examples:</p> <pre><code>PlayerFinders = {\n    [\"me\"] = {\n        Match = \"me\";\n        Prefix = true;\n        Absolute = true;\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            table.insert(players,plr)\n            plus()\n        end;\n    };\n\n    [\"all\"] = {\n        Match = \"all\";\n        Prefix = true;\n        Absolute = true;\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            local everyone = true\n            if isKicking then\n                for i,v in next,parent:GetChildren() do\n                    local p = getplr(v)\n                    if p.Name:lower():sub(1,#msg)==msg:lower() then\n                        everyone = false\n                        table.insert(players,p)\n                        plus()\n                    end\n                end\n            end\n            if everyone then\n                for i,v in next,parent:GetChildren() do\n                    local p = getplr(v)\n                    if p then\n                        table.insert(players,p)\n                        plus()\n                    end\n                end\n            end\n        end;\n    };\n\n    [\"@everyone\"] = {\n        Match = \"@everyone\";\n        Absolute = true;\n        Function = function(...)\n            return Functions.PlayerFinders.all.Function(...)\n        end\n    };\n\n    [\"others\"] = {\n        Match = \"others\";\n        Prefix = true;\n        Absolute = true;\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            for i,v in next,parent:GetChildren() do\n                local p = getplr(v)\n                if p ~= plr then\n                    table.insert(players,p)\n                    plus()\n                end\n            end\n        end;\n    };\n\n    [\"random\"] = {\n        Match = \"random\";\n        Prefix = true;\n        Absolute = true;\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            if #players&gt;=#parent:GetChildren() then return end\n            local rand = parent:GetChildren()[math.random(#parent:children())]\n            local p = getplr(rand)\n                for i,v in pairs(players) do\n                if(v.Name == p.Name)then\n                    Functions.PlayerFinders.random.Function(msg, plr, parent, players, getplr, plus, isKicking)\n                    return;\n                end\n            end\n                table.insert(players,p)\n            plus();\n        end;\n    };\n\n    [\"admins\"] = {\n        Match = \"admins\";\n        Prefix = true;\n        Absolute = true;\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            for i,v in next,parent:GetChildren() do\n                local p = getplr(v)\n                if Admin.CheckAdmin(p,false) then\n                    table.insert(players, p)\n                    plus()\n                end\n            end\n        end;\n    };\n\n    [\"nonadmins\"] = {\n        Match = \"nonadmins\";\n        Prefix = true;\n        Absolute = true;\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            for i,v in next,parent:GetChildren() do\n                local p = getplr(v)\n                if not Admin.CheckAdmin(p,false) then\n                    table.insert(players,p)\n                    plus()\n                end\n            end\n        end;\n    };\n\n    [\"friends\"] = {\n        Match = \"friends\";\n        Prefix = true;\n        Absolute = true;\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            for i,v in next,parent:GetChildren() do\n                local p = getplr(v)\n                if p:IsFriendsWith(plr.userId) then\n                    table.insert(players,p)\n                    plus()\n                end\n            end\n        end;\n    };\n\n    [\"@username\"] = {\n        Match = \"@\";\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            local matched = tonumber(msg:match(\"@(.*)\"))\n            local foundNum = 0\n                if matched then\n                for i,v in next,parent:GetChildren() do\n                    local p = getplr(v)\n                    if p and p.Name == matched then\n                        table.insert(players,p)\n                        plus()\n                        foundNum = foundNum+1\n                    end\n                end\n            end\n        end;\n    };\n\n    [\"%team\"] = {\n        Match = \"%\";\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            local matched = msg:match(\"%%(.*)\")\n            if matched then\n                for i,v in next,service.Teams:GetChildren() do\n                    if v.Name:lower():sub(1,#matched) == matched:lower() then\n                        for k,m in next,parent:GetChildren() do\n                            local p = getplr(m)\n                            if p.TeamColor == v.TeamColor then\n                                table.insert(players,p)\n                                plus()\n                            end\n                        end\n                    end\n                end\n            end\n        end;\n    };\n\n    [\"$group\"] = {\n        Match = \"$\";\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            local matched = msg:match(\"%$(.*)\")\n            if matched and tonumber(matched) then\n                for i,v in next,parent:children() do\n                    local p = getplr(v)\n                    if p:IsInGroup(tonumber(matched)) then\n                        table.insert(players,p)\n                        plus()\n                    end\n                end\n            end\n        end;\n    };\n\n    [\"id-\"] = {\n        Match = \"id-\";\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            local matched = tonumber(msg:match(\"id%-(.*)\"))\n            local foundNum = 0\n            if matched then\n                for i,v in next,parent:children() do\n                    local p = getplr(v)\n                    if p and p.userId == matched then\n                        table.insert(players,p)\n                        plus()\n                        foundNum = foundNum+1\n                    end\n                end\n                if foundNum == 0 then\n                    local ran,name = pcall(function() return service.Players:GetNameFromUserIdAsync(matched) end)\n                    if ran and name then\n                        local fakePlayer = service.Wrap(service.New(\"Folder\"))\n                        local data = {\n                            Name = name;\n                            ToString = name;\n                            ClassName = \"Player\";\n                            AccountAge = 0;\n                            CharacterAppearanceId = tostring(matched);\n                            UserId = tonumber(matched);\n                            userId = tonumber(matched);\n                            Parent = service.Players;\n                            Character = Instance.new(\"Model\");\n                            Backpack = Instance.new(\"Folder\");\n                            PlayerGui = Instance.new(\"Folder\");\n                            PlayerScripts = Instance.new(\"Folder\");\n                            Kick = function() fakePlayer:Destroy() fakePlayer:SetSpecial(\"Parent\", nil) end;\n                            IsA = function(ignore, arg) if arg == \"Player\" then return true end end;\n                        }\n                        for i,v in next,data do fakePlayer:SetSpecial(i, v) end\n                        table.insert(players, fakePlayer)\n                        plus()\n                    end\n                end\n            end\n        end;\n    };\n\n    [\"displayname-\"] = {\n        Match = \"displayname-\";\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            local matched = tonumber(msg:match(\"displayname%-(.*)\"))\n            local foundNum = 0\n            if matched then\n                for i,v in next,parent:children() do\n                    local p = getplr(v)\n                    if p and p.DisplayName == matched then\n                        table.insert(players,p)\n                        plus()\n                        foundNum = foundNum+1\n                    end\n                end\n            end\n        end;\n    };\n\n    [\"team-\"] = {\n        Match = \"team-\";\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            print(1)\n            local matched = msg:match(\"team%-(.*)\")\n            if matched then\n                for i,v in next,service.Teams:GetChildren() do\n                    if v.Name:lower():sub(1,#matched) == matched:lower() then\n                        for k,m in next,parent:GetChildren() do\n                            local p = getplr(m)\n                            if p.TeamColor == v.TeamColor then\n                                table.insert(players, p)\n                                plus()\n                            end\n                        end\n                    end\n                end\n            end\n        end;\n    };\n\n    [\"group-\"] = {\n        Match = \"group-\";\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            local matched = msg:match(\"group%-(.*)\")\n            if matched and tonumber(matched) then\n                for i,v in next,parent:children() do\n                    local p = getplr(v)\n                    if p:IsInGroup(tonumber(matched)) then\n                        table.insert(players,p)\n                        plus()\n                    end\n                end\n            end\n        end;\n    };\n\n    [\"-name\"] = {\n        Match = \"-\";\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            local matched = msg:match(\"%-(.*)\")\n            if matched then\n                local removes = service.GetPlayers(plr,matched,true)\n                for i,v in next,players do\n                    for k,p in next,removes do\n                        if v.Name == p.Name then\n                            table.remove(players,i)\n                            plus()\n                        end\n                    end\n                end\n            end\n        end;\n    };\n\n    [\"#number\"] = {\n        Match = \"#\";\n        Function = function(msg, plr, ...)\n            local matched = msg:match(\"%#(.*)\")\n            if matched and tonumber(matched) then\n                local num = tonumber(matched)\n                if not num then\n                    Remote.MakeGui(plr,'Output',{Title = 'Output'; Message = \"Invalid number!\"})\n                end\n                    for i = 1,num do\n                    Functions.PlayerFinders.random.Function(msg, plr, ...)\n                end\n            end\n        end;\n    };\n\n    [\"radius-\"] = {\n        Match = \"radius-\";\n        Function = function(msg, plr, parent, players, getplr, plus, isKicking)\n            local matched = msg:match(\"radius%-(.*)\")\n            if matched and tonumber(matched) then\n                local num = tonumber(matched)\n                if not num then\n                    Remote.MakeGui(plr,'Output',{Title = 'Output'; Message = \"Invalid number!\"})\n                end\n                    for i,v in next,parent:GetChildren() do\n                    local p = getplr(v)\n                    if p ~= plr and plr:DistanceFromCharacter(p.Character.Head.Position) &lt;= num then\n                        table.insert(players,p)\n                        plus()\n                    end\n                end\n            end\n        end;\n    };\n};\n</code></pre>"},{"location":"tables/server/logs/","title":"Logs","text":"<p>This table is responsible for all logging in Adonis.</p>"},{"location":"tables/server/logs/#log-tables","title":"Log Tables","text":"<pre><code>Chats = {}; --// Chat logs\nJoins = {}; --// Join logs\nScript = {}; --// Script-related logs\nRemoteFires = {}; --// RemoteEvent logs\nCommands = {}; --// Command logs\nExploit = {}; --// Exploit logs\nErrors = {}; --// Error logs\nTempUpdaters = {} --// Temporary functions used as list updaters\n</code></pre>"},{"location":"tables/server/logs/#tabtotype-table-table","title":"TabToType (table: Table)","text":"<p>Returns a string describing what the provided table is logging. </p> <p>Possible returns: \"Chat\", \"Join\", \"Script\", \"RemoteFire\", \"Command\", \"Exploit\", \"Error\", \"ServerDetails\", \"DateTime\"</p>"},{"location":"tables/server/logs/#addlog-table-string-logtable-table-string-log","title":"AddLog (table, string: LogTable, table, string: Log)","text":"<p>Adds 'Log' to 'LogTable' and automatically adds a timestamp if one is not provided (unless 'Log' is a table and Log.NoTime is true)</p> <p>Fires service.Events.LogAdded:Fire(TabToType(LogTable), Log, LogTable)</p>"},{"location":"tables/server/logs/#savecommandlogs","title":"SaveCommandLogs ()","text":"<p>Saves command logs to the datastore as \"OldCommandLogs\"</p>"},{"location":"tables/server/logs/#table-listupdaters","title":"Table: ListUpdaters","text":"<p>These are functions used by lists to update their contents when the user refreshes the list. </p> <p>Here's the list updater for ChatLogs as an example:</p> <pre><code>ListUpdaters = {\n    ChatLogs = function()\n        return Logs.Chats\n    end;\n}\n</code></pre>"},{"location":"tables/server/process/","title":"Process","text":"<p>This table contains functions that handle various events, such as calls to the RemoteEvent or player messages/commands.</p>"},{"location":"tables/server/process/#variables","title":"Variables","text":"<pre><code>MsgStringLimit = 500; --// Max message string length to prevent long length chat spam server crashing (chat &amp; command bar); Anything over will be truncated;\nMaxChatCharacterLimit = 250; --// Roblox chat character limit; The actual limit of the Roblox chat's textbox is 200 characters; I'm paranoid so I added 50 characters; Users should not be able to send a message larger than that;\nRateLimits = { --// Rate limit values for various events that may occur to prevent spam/performance issues\n    Remote = 0.01;\n    Command = 0.1;\n    Chat = 0.1;\n    CustomChat = 0.1;\n    RateLog = 10;\n};\n</code></pre>"},{"location":"tables/server/process/#remote-userdata-player-table-clientdata-string-command-tuple-arguments","title":"Remote (userdata: Player, table: ClientData, string: Command, tuple: Arguments)","text":"<p>Handles client to server communication. This is called whenever the RemoteEvent is triggered by the client.</p>"},{"location":"tables/server/process/#command-userdata-player-string-message-table-options-bool-noyield","title":"Command (userdata: Player, string: Message, table: Options, bool: noYield)","text":"<p>Processes player commands. </p>"},{"location":"tables/server/process/#datastoreupdated-string-key-table-data","title":"DataStoreUpdated (string: Key, table: Data)","text":"<p>Runs when the datastore updates and passes 'Key' and 'Data' to Core.LoadData</p>"},{"location":"tables/server/process/#crossserverchat-table-data","title":"CrossServerChat (table: Data)","text":"<p>Handles cross-server chat messages.</p>"},{"location":"tables/server/process/#customchat-userdata-player-string-message-string-mode-bool-cancross","title":"CustomChat (userdata: Player, string: Message, string: Mode, bool CanCross)","text":"<p>Handles messages sent via Adonis's custom chat.</p>"},{"location":"tables/server/process/#chat-userdata-player-string-message","title":"Chat (userdata: Player, string: Message)","text":"<p>Handles player chats.</p>"},{"location":"tables/server/process/#workspacechildadded-userdata-child","title":"WorkspaceChildAdded (userdata: Child)","text":"<p>Runs when a new child is added to Workspace.  Previously, this was used as an alternative to player.CharacterAdded however is no longer in use. </p>"},{"location":"tables/server/process/#logservice-message-trace-script","title":"LogService (Message, Trace, Script)","text":"<p>Runs whenever a new message is added by the LogService. Not currently used.</p>"},{"location":"tables/server/process/#playeradded-userdata-player","title":"PlayerAdded (userdata: Player)","text":"<p>Runs when a new player joins the game and handles the initial loading process, such as player removal (if banned) and client hooking.</p>"},{"location":"tables/server/process/#playerremoving-userdata-player","title":"PlayerRemoving (userdata: Player)","text":"<p>Runs when a player is leaving. Fires service.Events.PlayerRemoving(Player)</p>"},{"location":"tables/server/process/#networkadded-userdata-networkclient","title":"NetworkAdded (userdata: NetworkClient)","text":"<p>Runs when a new NetworkClient object is added to NetworkServer Fires service.Events.NetworkAdded(NetworkClient)</p>"},{"location":"tables/server/process/#networkremoved-userdata-networkclient","title":"NetworkRemoved (userdata: NetworkClient)","text":"<p>Runs when a NetworkClient is removed. Fires service.Events.NetworkRemoved(NetworkClient)</p>"},{"location":"tables/server/process/#finishloading-userdata-player","title":"FinishLoading (userdata: Player)","text":"<p>Assuming the player isn't removed or leaves while loading (during PlayerAdded) this function will run when the player and client are fully finished loading and are ready for communication. This handles the \"You're an admin!\" messages as well as other things that happen when the player finishes loading, such as the enabling of various client-side anti-exploit handlers and misc features. Fires service.Events.PlayerAdded(Player)</p>"},{"location":"tables/server/process/#characteradded-userdata-player","title":"CharacterAdded (userdata: Player)","text":"<p>Runs whenever a player's character loads.</p>"},{"location":"tables/server/process/#playerteleported-userdata-player-data","title":"PlayerTeleported (userdata: Player, data)","text":"<p>Runs whenever a player teleports to the current server. Not currently used.</p>"},{"location":"tables/server/remote/","title":"Remote","text":"<p>Remote handles all remote server-client communication.</p>"},{"location":"tables/server/remote/#table-returnables","title":"Table: Returnables","text":"<p>This is a table containing functions that can be called via client.Remote.Get and will return something to the calling client.</p>"},{"location":"tables/server/remote/#table-unencrypted","title":"Table: UnEncrypted","text":"<p>This is a table containing functions that can be used by clients without needing encryption/various security checks. This contains functions mostly related to initial loading before keys are exchanged, or communication with non-adonis-client localscripts, as well as very basic rapid fire events like chat handling.</p>"},{"location":"tables/server/remote/#table-commands","title":"Table: Commands","text":"<p>These are functions which can be ran by clients via client.Remote.Send They cannot return data and are purely \"fire and forget.\" </p>"},{"location":"tables/server/remote/#newsession-string-sessiontype","title":"NewSession (string: SessionType)","text":"<p>Creates and returns a new session handler that can be used to facilitate temporary communication between the server and multiple users with special commands/event defined. </p> <p>Clients can listen for session events as needed via service.Events.SessionData</p> <p>Here's an example of NewSession in action in the form of a, at the time of writing this, work in process private chat command &amp; GUI:</p> <p>Server code: <pre><code>local newSession = Remote.NewSession(\"PrivateChat\");\nlocal eventConnection = newSession.SessionEvent.Event:Connect(function(p, ...)\n    local args = {...};\n    local cmd = args[1];\n\n    if cmd == \"SendMessage\" then\n        if newSession.Users[p] then\n            table.insert(newSession.Users[p].Messages, args[2]);\n        end\n\n        newSession.SendToUsers(\"PlayerSentMessage\", p, args[2]);\n    elseif cmd == \"LeaveSession\" then\n        newSession.Users[p] = nil;\n        newSession.SendToUsers(\"PlayerLeftSession\", p);\n    elseif cmd == \"EndSession\" and p == plr then\n        newSession.End();\n    end\nend)\n\nfor i,v in ipairs(service.GetPlayers(plr, args[1])) do\n    newSession.AddUser(v, {\n        Messages = {};\n    });\n\n    Remote.MakeGui(v, \"PrivateChat\", {\n        Owner = plr;\n        SessionKey = newSession.SessionKey;\n    })\n\n    -- testing stuff below\n    wait(2)\n    newSession.SendToUsers(\"PlayerSentMessage\", plr, \"this is a test message\");\nend\n</code></pre></p> <p>Client Code: <pre><code>local sessionEvent = service.Events.SessionData:Connect(function(sessionKey, cmd, ...)\n    local vargs = {...};\n    print(\"we got session thing!\");\n    if SessionKey == sessionKey then\n      print(\"SESSION KEY VALID\")\n      if cmd == \"PlayerSentChat\" then\n        local p = vargs[1];\n        local message = vargs[2];\n\n        print(\"got chat: \".. p.Name, \"Message: \".. message)\n      end\n   end\nend)\n</code></pre></p>"},{"location":"tables/server/remote/#getsession-string-sessionkey","title":"GetSession (string: SessionKey)","text":"<p>Gets the session belonging to 'SessionKey'</p>"},{"location":"tables/server/remote/#fire-userdata-player-tuple-arguments","title":"Fire (userdata: Player, tuple: Arguments)","text":"<p>(Raw fire) Sends data to the client belonging to 'Player' with any arguments passed. Does not handle command encryption before sending. This should not be used for normal server-client communication.</p>"},{"location":"tables/server/remote/#getfire-userdata-player-tuple-arguments","title":"GetFire (userdata: Player, tuple: Arguments)","text":"<p>(Raw fire) Functionally similar to Remote.Fire except it uses the RemoteFunction and is thus able to return data from the client. This should not be used for normal server-client communication. </p>"},{"location":"tables/server/remote/#send-userdata-player-string-command-tuple-arguments","title":"Send (userdata: Player, string: Command, tuple: Arguments)","text":"<p>Encrypts 'Command' and sends it with 'Arguments' to client of 'Player' This should be used for normal communication.</p>"},{"location":"tables/server/remote/#get-userdata-player-string-command-tuple-arguments","title":"Get (userdata: Player, string: Command, tuple: Arguments)","text":"<p>Encrypts 'Command' and sends it with 'Arguments' to client of 'Player' Functionally similar to Remote.Send except it uses the RemoteFunction and is thus able to return data from the client. This should be used for normal communication. </p>"},{"location":"tables/server/remote/#checkclient-userdata-player","title":"CheckClient (userdata: Player)","text":"<p>Checks if the 'Player's client is hooked and ready for communication. </p>"},{"location":"tables/server/remote/#ping-userdata-player","title":"Ping (userdata: Player)","text":"<p>Runs Remote.Get(Player, \"Ping\") and returns the result. </p>"},{"location":"tables/server/remote/#makegui-userdata-player-string-guiname-table-data-table-themedata","title":"MakeGui (userdata: Player, string: GuiName, table: Data, table: ThemeData)","text":"<p>Tells 'Player's client to create the specified GUI with the specified data provided.</p>"},{"location":"tables/server/remote/#makeguiget-userdata-player-string-guiname-table-data-table-themedata","title":"MakeGuiGet (userdata: Player, string: GuiName, table: Data, table: ThemeData)","text":"<p>Identical to Remote.MakeGui except this will yield and return any data returned by the GUI created. This is used in conjunction with UI elements like the YesNoPrompt.</p>"},{"location":"tables/server/remote/#getgui-userdata-player-string-guiname-table-data-table-themedata","title":"GetGui (userdata: Player, string: GuiName, table: Data, table: ThemeData)","text":"<p>Alternative method of calling Remote.MakeGuiGet</p>"},{"location":"tables/server/remote/#removegui-userdata-player-string-guiname","title":"RemoveGui (userdata: Player, string: GuiName)","text":"<p>Removes the specified UI element belonging to 'GuiName' from 'Player'</p>"},{"location":"tables/server/remote/#newparticle-userdata-player-userdata-parent-string-type-table-properties","title":"NewParticle (userdata: Player, userdata: Parent, string: Type, table: Properties)","text":"<p>Creates a new particle of 'Type' in 'Parent' locally for 'Player'</p>"},{"location":"tables/server/remote/#removeparticle-userdata-player-userdata-parent-string-name","title":"RemoveParticle (userdata: Player, userdata: Parent, string: Name)","text":"<p>Removes particle from 'Parent' for 'Player'</p>"},{"location":"tables/server/remote/#newlocal-userdata-player-string-classname-table-properties-userdata-parent","title":"NewLocal (userdata: Player, string: ClassName, table: Properties, userdata: Parent)","text":"<p>Creates a new particle locally for 'Player' of 'ClassName' with 'Properties' in 'Parent'</p>"},{"location":"tables/server/remote/#makelocal-userdata-player-userdata-object-userdata-parent-bool-clone","title":"MakeLocal (userdata: Player, userdata: Object, userdata: Parent, bool: Clone)","text":"<p>Makes 'Object' local to 'Player' </p>"},{"location":"tables/server/remote/#movelocal-player-object-parent-newparent","title":"MoveLocal (Player, Object, Parent, newParent)","text":"<p>Moves local object to new parent for 'Player'</p>"},{"location":"tables/server/remote/#removelocal-player-object-parent-string-match","title":"RemoveLocal (Player, Object, Parent, string: Match)","text":"<p>Removes local from 'Player' in 'Parent' matching 'Object' or 'Match'</p>"},{"location":"tables/server/remote/#setlighting-player-string-property-value","title":"SetLighting (Player, string: Property, Value)","text":"<p>Sets game.Lighting[Property] to 'Value' for 'Player'</p>"},{"location":"tables/server/remote/#fireevent-player-tuple-arguments","title":"FireEvent (Player, tuple: Arguments)","text":"<p>Triggers client event on 'Player' with 'Arguments'</p>"},{"location":"tables/server/remote/#newplayerevent-player-string-type-function-function","title":"NewPlayerEvent (Player, string: Type, function: Function)","text":"<p>Creates a new player event and can be triggered by the client. </p>"},{"location":"tables/server/remote/#playaudio-player-int-audioid-int-volume-int-pitch-bool-looped","title":"PlayAudio (Player, int: AudioId, int: Volume, int: Pitch, bool: Looped)","text":"<p>Plays audio locally on 'Player'</p>"},{"location":"tables/server/remote/#stopaudio-player-int-audioid","title":"StopAudio (Player, int: AudioId)","text":"<p>Stops current playing local audio on 'Player'</p>"},{"location":"tables/server/remote/#stopallaudio-userdata-player","title":"StopAllAudio (userdata: Player)","text":"<p>Stops all playing audio (locally created by Adonis)</p>"},{"location":"tables/server/remote/#loadcode-player-string-luacode-bool-getresult","title":"LoadCode (Player, string: LuaCode, bool: GetResult)","text":"<p>Runs 'LuaCode' on the player's client and gets the result if 'GetResult' is true.</p>"},{"location":"tables/server/remote/#encrypt-string-string-string-key-table-cache","title":"Encrypt (string: String, string: Key, table: Cache)","text":"<p>Handles encryption.</p>"},{"location":"tables/server/remote/#decrypt-string-string-string-key-table-cache","title":"Decrypt (string: String, string: Key, table: Cache)","text":"<p>Handles decryption.</p>"},{"location":"tables/shared/service/","title":"The \"Service\" Metatable","text":"<p>In Adonis, the \"service\" variable is a metatable provided by the Service core module containing many essential functions and variables used by both the server and client. The service table for the client is nearly identical to the service table for the server with the exception of a few variables added by either the client or server during loading. </p> <p>If an index is requested from the service table (eg. service.Players) it will first check if it contains the requested index. If it does not contain the requested index, the it will query game:GetService(index) and return the result instead. This offers a slightly quicker alternative to typing game:GetService() when getting a Roblox service. </p>"},{"location":"tables/shared/service/#special-functions-variables","title":"Special Functions &amp; Variables","text":"<p>The following is a list of functions and variables that can be found in the service metatable.</p> <p>Note that ... implies user defined arguments that are not necessarily required to use a function or used directly by the function. This is almost always arguments to be passed to a user defined function. </p> <p>Variables starting with * indicate an optional variable.</p>"},{"location":"tables/shared/service/#serviceeventservice","title":"service.EventService","text":"<p>The EventService table/object contains functions related to event and task handling. All members of the EventService object can be accessed as members of the service metatable. </p>"},{"location":"tables/shared/service/#tracktaskname-function","title":"TrackTask(Name, Function, ...)","text":"<p>Creates a new Adonis-tracked \"task\" thread. If Name starts with \"Thread:\" Adonis will create the task as a coroutine, otherwise TrackTask will yield until function completion. TrackTask will pass ... as arguments to the specified task function and will return the result.</p> <pre><code>--// Add existing players in case some are already in the server\nfor _, player in service.Players:GetPlayers() do\n    service.TrackTask(\"Thread: LoadPlayer \"..tostring(player.Name), server.Core.LoadExistingPlayer, player);\nend\n</code></pre>"},{"location":"tables/shared/service/#eventtaskname-function","title":"EventTask(Name, Function)","text":"<p>Creates a special function that can be called by an event to spawn a new task each time the event fires.</p> <pre><code>service.Players.PlayerAdded:Connect(service.EventTask(\"PlayerAdded\", server.Process.PlayerAdded))\n</code></pre>"},{"location":"tables/shared/service/#gettasks","title":"GetTasks()","text":"<p>Returns a table containing currently tracked tasks.</p>"},{"location":"tables/shared/service/#events","title":"Events","text":"<p>Acts as a proxy to service.GetEvent(EventName) which will return a special event object for EventName.</p> <p>The event object contains methods like :Connect(function), :Fire(...), and :Wait()</p>"},{"location":"tables/shared/service/#connectfunction","title":":Connect(function)","text":"<p>Will attach a user specified function to the event. When :Fire(...) is called, the arguments passed to :Fire(...) will be passed to the attached function.</p>"},{"location":"tables/shared/service/#connectoncefunction","title":":ConnectOnce(function)","text":"<p>Same as :Connect() except disconnects after firing once.</p>"},{"location":"tables/shared/service/#fire","title":":Fire(...)","text":"<p>Runs all functions attached to the event and passes ... to them.</p>"},{"location":"tables/shared/service/#wait","title":":Wait()","text":"<p>Waits for the event to fire once. Will return whatever arguments :Fire(...) sent. Yields.</p>"},{"location":"tables/shared/service/#adonis-events","title":"Adonis Events","text":"<p>Adonis has a number of custom events that can be used by plugins or Adonis itself. </p> <p>Events List: <pre><code>--// SERVER\nCommandRan(Player, Data) \n--[[\n  Data is a table containing the following: \n  {\n    Message = msg,     --// The full message the player chatted; Previously the \"Message\" param\n    Matched = matched, --// The :kick in :kick me (the MatchedString param previously (the command basically))\n    Args = args,       --// The command arguments (the me in :kick me)\n    Command = command, --// The command's data table (contains the function and all info about the command being ran)\n    Index = index,     --// The command's index in the command table\n    Success = success, --// Did the command run? Did it fail? Did it return anything for some reason? This will tell us..\n    Error = error,     --// If it failed, what was the error?\n    Options = opts,    --// The options (\"opts\" table) passed to Process.Command; Contains stuff like isSystem and CrossServer flags\n    PlayerData = pDat  --// Data about the player, such as Level, isAgent, isDonor, and the Player object itself\n  }\n--]]\n\nCustomChat(Player, Message, Mode)\nPlayerChatted(Player, Message)\nPlayerAdded(Player)\nPlayerRemoving(Player)\nCharacterAdded(Player)\nNetworkAdded(NetworkClient)\nNetworkRemoved(NetworkClient)\nLogAdded(LogType, Log, LogTable)\n\n--// Currently Disabled\nObjectAdded(Object) \nObjectRemoved(Object)\nOutput(Message, Type)\nErrorMessage(Message, Trace, Script)\n\n--// CLIENT\nCharacterAdded()\nCharacterRemoving()\n</code></pre></p> <p>Example: <pre><code>--// Connect to the LogAdded event\nservice.Events.LogAdded:Connect(function(LogType, Log, LogTable)\n    print(\"New \" .. LogType ..\" log: \".. Log.Text .. \" - \" .. Log.Desc)\nend)\n\n--// Wait for a log to be added\nlocal LogType, Log, LogTable = service.Events.LogAdded:Wait()\n\n--// Fire the LogAdded event\nservice.Events.LogAdded:Fire(\"Command\", {Text = \"Player1: :ff me\", Desc = \"Player1 ran a command\"}, server.Logs.Commands)\n\n--// Also here's the list of potential LogTypes:\n--// Chats in the first entry of this table corresponds to server.Logs.Chats, it's log type is \"Chat\"\nlocal indToName = {\n    Chats = \"Chat\";\n    Joins = \"Join\";\n    Script = \"Script\";\n    Replications = \"Replication\";\n    NetworkOwners = \"NetworkOwner\";\n    RemoteFires = \"RemoteFire\";\n    Commands = \"Command\";\n    Exploit = \"Exploit\";\n    Errors = \"Error\";\n}\n</code></pre></p>"},{"location":"tables/shared/service/#checkeventswaiting","title":"CheckEvents(*Waiting)","text":"<p>Currently disabled. Responsible for determining which events are done and should be cleaned up.</p>"},{"location":"tables/shared/service/#foreachtable-function","title":"ForEach(Table, Function)","text":"<p>Iterates through a given table, calling Function(Table, Index, Value) for each item in the table.</p>"},{"location":"tables/shared/service/#wrapeventargstable","title":"WrapEventArgs(Table)","text":"<p>Responsible for wrapping arguments passed to event functions.</p>"},{"location":"tables/shared/service/#unwrapeventargstable","title":"UnWrapEventArgs(Table)","text":"<p>Unwraps objects in the given table. </p>"},{"location":"tables/shared/service/#geteventeventname","title":"GetEvent(EventName)","text":"<p>Returns a special object for Adonis events. Refer to the Events section. Identical to service.Events.EventName</p>"},{"location":"tables/shared/service/#hookeventeventname-function","title":"HookEvent(EventName, Function)","text":"<p>Attaches a function to the specified EventName. Identical to calling service.Events.EventName:Connect()</p>"},{"location":"tables/shared/service/#fireeventeventname","title":"FireEvent(EventName, ...)","text":"<p>Identical to service.Events.EventName:Fire(...)</p>"},{"location":"tables/shared/service/#removeeventseventname","title":"RemoveEvents(EventName)","text":"<p>Removes all event hooks associated with EventName.</p>"},{"location":"tables/shared/service/#servicethreadservice","title":"service.ThreadService","text":"<p>The ThreadService object can be accessed via service.ThreadService. Unlike WrapService, EventService, and HelperService the functions and variables in ThreadService cannot be accessed as members of the service metatable. Instead, they can be accessed using the ThreadService object. </p>"},{"location":"tables/shared/service/#tasks","title":"Tasks","text":"<p>Table containing running tasks.</p>"},{"location":"tables/shared/service/#threads","title":"Threads","text":"<p>Table containing running threads.</p>"},{"location":"tables/shared/service/#checktasks","title":"CheckTasks()","text":"<p>Responsible for removing \"dead\" tasks.</p>"},{"location":"tables/shared/service/#newtaskname-function-timeout","title":"NewTask(Name, Function, *Timeout)","text":"<p>Creates a new task and returns newTask.Resume,newTask</p> <p>Tasks have a number of functions. At it's core a task is a proxy object to a coroutine.</p> <p>Every task contains the following: <pre><code>PID - a unique identifier for the task\nName - task name\nIndex - index in the Tasks table\nCreated - time the task was created\nChanged - a table containing task related event functions, such as :connect(function), :fire(...); Fires when task changes\nTimeout - how long the task can run for, default inf (0)\nRunning - bool that's true when the task is running\nFunction - the task's function\nR_Status - current task status\nFinished - table containing tasks related event functions, such as :connect(function), fire(...), and :wait(); Fires when task finishes\nFunction - task function handler\nRemove - removes the task\nThread - task thread handler\nResume - resumes the task\nStatus - returns task status\nPause - suspends the task\nStop - stops and removes the task\nKill - ends and removes the task\nEnd - ends the task\n</code></pre></p>"},{"location":"tables/shared/service/#runtaskname-function","title":"RunTask(Name, Function, ...)","text":"<p>Creates a new task with Name and Function, then runs the new task with arguments ...</p>"},{"location":"tables/shared/service/#timeoutruntaskname-function-timeout","title":"TimeoutRunTask(Name, Function, Timeout, ...)","text":"<p>Same as RunTask but with a timeout.</p>"},{"location":"tables/shared/service/#waittaskname-function","title":"WaitTask(Name, Function, ...)","text":"<p>Same as RunTask, but yields until task.Finished fires.</p>"},{"location":"tables/shared/service/#neweventtaskname-function-timeout","title":"NewEventTask(Name, Function, *Timeout)","text":"<p>Returns a function that can be used to create a new task each time an event fires.</p>"},{"location":"tables/shared/service/#stop-wait-pause-yield","title":"Stop, Wait, Pause, Yield,","text":"<p>coroutine.yield</p>"},{"location":"tables/shared/service/#status","title":"Status","text":"<p>corotuine.status</p>"},{"location":"tables/shared/service/#running-get","title":"Running, Get","text":"<p>coroutine.running</p>"},{"location":"tables/shared/service/#create","title":"Create","text":"<p>coroutine.create</p>"},{"location":"tables/shared/service/#start","title":"Start","text":"<p>coroutine.resume</p>"},{"location":"tables/shared/service/#wrap","title":"Wrap","text":"<p>corotouine.wrap</p>"},{"location":"tables/shared/service/#newfunction","title":"New(Function)","text":"<p>Creates a new coroutine and adds it to threads</p>"},{"location":"tables/shared/service/#endthread","title":"End(Thread)","text":"<p>Attempted to end the supplied thread and remove it</p>"},{"location":"tables/shared/service/#wrapfunction","title":"Wrap(Function, ...)","text":"<p>Creates a new coroutine, adds it to threads, and then calls Resume with ...</p>"},{"location":"tables/shared/service/#resumethread","title":"Resume(Thread, ...)","text":"<p>Calls resume on the specified thread with ...</p>"},{"location":"tables/shared/service/#removethread","title":"Remove(thread)","text":"<p>Removes the specified thread.</p>"},{"location":"tables/shared/service/#stopall","title":"StopAll()","text":"<p>Stops all threads.</p>"}]}